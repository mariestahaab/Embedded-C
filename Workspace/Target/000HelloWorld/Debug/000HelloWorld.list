
000HelloWorld.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ce0  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08000ea4  08000ea4  00010ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000ef0  08000ef0  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08000ef0  08000ef0  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ef0  08000ef0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ef0  08000ef0  00010ef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ef4  08000ef4  00010ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08000ef8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  20000074  08000f6c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e0  08000f6c  000201e0  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY
 13 .debug_info   000009d5  00000000  00000000  000200e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000321  00000000  00000000  00020ab6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000118  00000000  00000000  00020dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000bf  00000000  00000000  00020ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002c83  00000000  00000000  00020faf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001389  00000000  00000000  00023c32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000097a6  00000000  00000000  00024fbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000009d4  00000000  00000000  0002e764  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  0002f138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000074 	.word	0x20000074
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000e8c 	.word	0x08000e8c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000078 	.word	0x20000078
 8000200:	08000e8c 	.word	0x08000e8c

08000204 <main>:

volatile uint32_t *portA_InReg = (uint32_t*) 0x40020010;
volatile uint32_t *portB_OutReg = (uint32_t*) 0x40020414;

int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b084      	sub	sp, #16
 8000208:	af00      	add	r7, sp, #0
	//CONFIGURE REGISTERS:

	*ClkCtrlReg		|= (0x1 << 1) | (0x1 << 0);
 800020a:	4b49      	ldr	r3, [pc, #292]	; (8000330 <main+0x12c>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	681a      	ldr	r2, [r3, #0]
 8000210:	4b47      	ldr	r3, [pc, #284]	; (8000330 <main+0x12c>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	f042 0203 	orr.w	r2, r2, #3
 8000218:	601a      	str	r2, [r3, #0]

	*portA_ModeReg &= ~(0x3 << 16) & ~(0x3 << 14) & ~(0x3 << 12) & ~(0x3 << 10);	// CLEAR
 800021a:	4b46      	ldr	r3, [pc, #280]	; (8000334 <main+0x130>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	681a      	ldr	r2, [r3, #0]
 8000220:	4b44      	ldr	r3, [pc, #272]	; (8000334 <main+0x130>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	f422 327f 	bic.w	r2, r2, #261120	; 0x3fc00
 8000228:	601a      	str	r2, [r3, #0]

	*portA_PuPdReg &= ~(0x3 << 16) & ~(0x3 << 14) & ~(0x3 << 12) & ~(0x3 << 10);	// CLEAR
 800022a:	4b43      	ldr	r3, [pc, #268]	; (8000338 <main+0x134>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	681a      	ldr	r2, [r3, #0]
 8000230:	4b41      	ldr	r3, [pc, #260]	; (8000338 <main+0x134>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	f422 327f 	bic.w	r2, r2, #261120	; 0x3fc00
 8000238:	601a      	str	r2, [r3, #0]
	*portA_PuPdReg |= (0x1 << 16) | (0x1 << 14) | (0x1 << 12) | (0x1 << 10);		// SET
 800023a:	4b3f      	ldr	r3, [pc, #252]	; (8000338 <main+0x134>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	681a      	ldr	r2, [r3, #0]
 8000240:	4b3d      	ldr	r3, [pc, #244]	; (8000338 <main+0x134>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	f442 32aa 	orr.w	r2, r2, #87040	; 0x15400
 8000248:	601a      	str	r2, [r3, #0]

	*portB_ModeReg &= ~(0x3 << 12) & ~(0x3 << 10) & ~(0x3 << 8) & ~(0x3 << 6);		// CLEAR
 800024a:	4b3c      	ldr	r3, [pc, #240]	; (800033c <main+0x138>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	681a      	ldr	r2, [r3, #0]
 8000250:	4b3a      	ldr	r3, [pc, #232]	; (800033c <main+0x138>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 8000258:	601a      	str	r2, [r3, #0]
	*portB_ModeReg |= (0x1 << 12) | (0x1 << 10) | (0x1 << 8) | (0x1 << 6);			// SET
 800025a:	4b38      	ldr	r3, [pc, #224]	; (800033c <main+0x138>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	681a      	ldr	r2, [r3, #0]
 8000260:	4b36      	ldr	r3, [pc, #216]	; (800033c <main+0x138>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	f442 52aa 	orr.w	r2, r2, #5440	; 0x1540
 8000268:	601a      	str	r2, [r3, #0]

	printf("Hello World\n");
 800026a:	4835      	ldr	r0, [pc, #212]	; (8000340 <main+0x13c>)
 800026c:	f000 fa7e 	bl	800076c <puts>

	while(1){

		*portB_OutReg |= (0xF << 3);		// Make all ROWS HIGH.
 8000270:	4b34      	ldr	r3, [pc, #208]	; (8000344 <main+0x140>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	681a      	ldr	r2, [r3, #0]
 8000276:	4b33      	ldr	r3, [pc, #204]	; (8000344 <main+0x140>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	f042 0278 	orr.w	r2, r2, #120	; 0x78
 800027e:	601a      	str	r2, [r3, #0]

		*portB_OutReg &= ~(0x1 << 3);		// Make R1 LOW.
 8000280:	4b30      	ldr	r3, [pc, #192]	; (8000344 <main+0x140>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	681a      	ldr	r2, [r3, #0]
 8000286:	4b2f      	ldr	r3, [pc, #188]	; (8000344 <main+0x140>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	f022 0208 	bic.w	r2, r2, #8
 800028e:	601a      	str	r2, [r3, #0]

		if( !(*portA_InReg & (0x1 << 5)) ){
 8000290:	4b2d      	ldr	r3, [pc, #180]	; (8000348 <main+0x144>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	f003 0320 	and.w	r3, r3, #32
 800029a:	2b00      	cmp	r3, #0
 800029c:	d10c      	bne.n	80002b8 <main+0xb4>
			for(uint32_t i = 300000; i > 0; i--);
 800029e:	4b2b      	ldr	r3, [pc, #172]	; (800034c <main+0x148>)
 80002a0:	60fb      	str	r3, [r7, #12]
 80002a2:	e002      	b.n	80002aa <main+0xa6>
 80002a4:	68fb      	ldr	r3, [r7, #12]
 80002a6:	3b01      	subs	r3, #1
 80002a8:	60fb      	str	r3, [r7, #12]
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d1f9      	bne.n	80002a4 <main+0xa0>
			printf("Key 1 pressed\n");
 80002b0:	4827      	ldr	r0, [pc, #156]	; (8000350 <main+0x14c>)
 80002b2:	f000 fa5b 	bl	800076c <puts>
 80002b6:	e7db      	b.n	8000270 <main+0x6c>
		}
		else if( !(*portA_InReg & (0x1 << 6)) ){
 80002b8:	4b23      	ldr	r3, [pc, #140]	; (8000348 <main+0x144>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d10c      	bne.n	80002e0 <main+0xdc>
			for(uint32_t i = 300000; i > 0; i--);
 80002c6:	4b21      	ldr	r3, [pc, #132]	; (800034c <main+0x148>)
 80002c8:	60bb      	str	r3, [r7, #8]
 80002ca:	e002      	b.n	80002d2 <main+0xce>
 80002cc:	68bb      	ldr	r3, [r7, #8]
 80002ce:	3b01      	subs	r3, #1
 80002d0:	60bb      	str	r3, [r7, #8]
 80002d2:	68bb      	ldr	r3, [r7, #8]
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d1f9      	bne.n	80002cc <main+0xc8>
			printf("Key 2 pressed\n");
 80002d8:	481e      	ldr	r0, [pc, #120]	; (8000354 <main+0x150>)
 80002da:	f000 fa47 	bl	800076c <puts>
 80002de:	e7c7      	b.n	8000270 <main+0x6c>
		}
		else if( !(*portA_InReg & (0x1 << 7)) ){
 80002e0:	4b19      	ldr	r3, [pc, #100]	; (8000348 <main+0x144>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d10c      	bne.n	8000308 <main+0x104>
			for(uint32_t i = 300000; i > 0; i--);
 80002ee:	4b17      	ldr	r3, [pc, #92]	; (800034c <main+0x148>)
 80002f0:	607b      	str	r3, [r7, #4]
 80002f2:	e002      	b.n	80002fa <main+0xf6>
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	3b01      	subs	r3, #1
 80002f8:	607b      	str	r3, [r7, #4]
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d1f9      	bne.n	80002f4 <main+0xf0>
			printf("Key 3 pressed\n");
 8000300:	4815      	ldr	r0, [pc, #84]	; (8000358 <main+0x154>)
 8000302:	f000 fa33 	bl	800076c <puts>
 8000306:	e7b3      	b.n	8000270 <main+0x6c>
		}
		else if( !(*portA_InReg & (0x1 << 8)) ){
 8000308:	4b0f      	ldr	r3, [pc, #60]	; (8000348 <main+0x144>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000312:	2b00      	cmp	r3, #0
 8000314:	d1ac      	bne.n	8000270 <main+0x6c>
			for(uint32_t i = 300000; i > 0; i--);
 8000316:	4b0d      	ldr	r3, [pc, #52]	; (800034c <main+0x148>)
 8000318:	603b      	str	r3, [r7, #0]
 800031a:	e002      	b.n	8000322 <main+0x11e>
 800031c:	683b      	ldr	r3, [r7, #0]
 800031e:	3b01      	subs	r3, #1
 8000320:	603b      	str	r3, [r7, #0]
 8000322:	683b      	ldr	r3, [r7, #0]
 8000324:	2b00      	cmp	r3, #0
 8000326:	d1f9      	bne.n	800031c <main+0x118>
			printf("Key A pressed\n");
 8000328:	480c      	ldr	r0, [pc, #48]	; (800035c <main+0x158>)
 800032a:	f000 fa1f 	bl	800076c <puts>
		*portB_OutReg |= (0xF << 3);		// Make all ROWS HIGH.
 800032e:	e79f      	b.n	8000270 <main+0x6c>
 8000330:	20000000 	.word	0x20000000
 8000334:	20000004 	.word	0x20000004
 8000338:	2000000c 	.word	0x2000000c
 800033c:	20000008 	.word	0x20000008
 8000340:	08000ea4 	.word	0x08000ea4
 8000344:	20000014 	.word	0x20000014
 8000348:	20000010 	.word	0x20000010
 800034c:	000493e0 	.word	0x000493e0
 8000350:	08000eb0 	.word	0x08000eb0
 8000354:	08000ec0 	.word	0x08000ec0
 8000358:	08000ed0 	.word	0x08000ed0
 800035c:	08000ee0 	.word	0x08000ee0

08000360 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000360:	b480      	push	{r7}
 8000362:	b083      	sub	sp, #12
 8000364:	af00      	add	r7, sp, #0
 8000366:	4603      	mov	r3, r0
 8000368:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800036a:	4b0e      	ldr	r3, [pc, #56]	; (80003a4 <ITM_SendChar+0x44>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	4a0d      	ldr	r2, [pc, #52]	; (80003a4 <ITM_SendChar+0x44>)
 8000370:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000374:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000376:	4b0c      	ldr	r3, [pc, #48]	; (80003a8 <ITM_SendChar+0x48>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	4a0b      	ldr	r2, [pc, #44]	; (80003a8 <ITM_SendChar+0x48>)
 800037c:	f043 0301 	orr.w	r3, r3, #1
 8000380:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000382:	bf00      	nop
 8000384:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	f003 0301 	and.w	r3, r3, #1
 800038e:	2b00      	cmp	r3, #0
 8000390:	d0f8      	beq.n	8000384 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000392:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000396:	79fb      	ldrb	r3, [r7, #7]
 8000398:	6013      	str	r3, [r2, #0]
}
 800039a:	bf00      	nop
 800039c:	370c      	adds	r7, #12
 800039e:	46bd      	mov	sp, r7
 80003a0:	bc80      	pop	{r7}
 80003a2:	4770      	bx	lr
 80003a4:	e000edfc 	.word	0xe000edfc
 80003a8:	e0000e00 	.word	0xe0000e00

080003ac <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b086      	sub	sp, #24
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	60f8      	str	r0, [r7, #12]
 80003b4:	60b9      	str	r1, [r7, #8]
 80003b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003b8:	2300      	movs	r3, #0
 80003ba:	617b      	str	r3, [r7, #20]
 80003bc:	e00a      	b.n	80003d4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80003be:	f3af 8000 	nop.w
 80003c2:	4601      	mov	r1, r0
 80003c4:	68bb      	ldr	r3, [r7, #8]
 80003c6:	1c5a      	adds	r2, r3, #1
 80003c8:	60ba      	str	r2, [r7, #8]
 80003ca:	b2ca      	uxtb	r2, r1
 80003cc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003ce:	697b      	ldr	r3, [r7, #20]
 80003d0:	3301      	adds	r3, #1
 80003d2:	617b      	str	r3, [r7, #20]
 80003d4:	697a      	ldr	r2, [r7, #20]
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	429a      	cmp	r2, r3
 80003da:	dbf0      	blt.n	80003be <_read+0x12>
  }

  return len;
 80003dc:	687b      	ldr	r3, [r7, #4]
}
 80003de:	4618      	mov	r0, r3
 80003e0:	3718      	adds	r7, #24
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}

080003e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80003e6:	b580      	push	{r7, lr}
 80003e8:	b086      	sub	sp, #24
 80003ea:	af00      	add	r7, sp, #0
 80003ec:	60f8      	str	r0, [r7, #12]
 80003ee:	60b9      	str	r1, [r7, #8]
 80003f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003f2:	2300      	movs	r3, #0
 80003f4:	617b      	str	r3, [r7, #20]
 80003f6:	e009      	b.n	800040c <_write+0x26>
  {
    //__io_putchar(*ptr++);

	  ITM_SendChar(*ptr++);
 80003f8:	68bb      	ldr	r3, [r7, #8]
 80003fa:	1c5a      	adds	r2, r3, #1
 80003fc:	60ba      	str	r2, [r7, #8]
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	4618      	mov	r0, r3
 8000402:	f7ff ffad 	bl	8000360 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000406:	697b      	ldr	r3, [r7, #20]
 8000408:	3301      	adds	r3, #1
 800040a:	617b      	str	r3, [r7, #20]
 800040c:	697a      	ldr	r2, [r7, #20]
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	429a      	cmp	r2, r3
 8000412:	dbf1      	blt.n	80003f8 <_write+0x12>
  }
  return len;
 8000414:	687b      	ldr	r3, [r7, #4]
}
 8000416:	4618      	mov	r0, r3
 8000418:	3718      	adds	r7, #24
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}

0800041e <_close>:

int _close(int file)
{
 800041e:	b480      	push	{r7}
 8000420:	b083      	sub	sp, #12
 8000422:	af00      	add	r7, sp, #0
 8000424:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000426:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800042a:	4618      	mov	r0, r3
 800042c:	370c      	adds	r7, #12
 800042e:	46bd      	mov	sp, r7
 8000430:	bc80      	pop	{r7}
 8000432:	4770      	bx	lr

08000434 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000434:	b480      	push	{r7}
 8000436:	b083      	sub	sp, #12
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
 800043c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800043e:	683b      	ldr	r3, [r7, #0]
 8000440:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000444:	605a      	str	r2, [r3, #4]
  return 0;
 8000446:	2300      	movs	r3, #0
}
 8000448:	4618      	mov	r0, r3
 800044a:	370c      	adds	r7, #12
 800044c:	46bd      	mov	sp, r7
 800044e:	bc80      	pop	{r7}
 8000450:	4770      	bx	lr

08000452 <_isatty>:

int _isatty(int file)
{
 8000452:	b480      	push	{r7}
 8000454:	b083      	sub	sp, #12
 8000456:	af00      	add	r7, sp, #0
 8000458:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800045a:	2301      	movs	r3, #1
}
 800045c:	4618      	mov	r0, r3
 800045e:	370c      	adds	r7, #12
 8000460:	46bd      	mov	sp, r7
 8000462:	bc80      	pop	{r7}
 8000464:	4770      	bx	lr

08000466 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000466:	b480      	push	{r7}
 8000468:	b085      	sub	sp, #20
 800046a:	af00      	add	r7, sp, #0
 800046c:	60f8      	str	r0, [r7, #12]
 800046e:	60b9      	str	r1, [r7, #8]
 8000470:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000472:	2300      	movs	r3, #0
}
 8000474:	4618      	mov	r0, r3
 8000476:	3714      	adds	r7, #20
 8000478:	46bd      	mov	sp, r7
 800047a:	bc80      	pop	{r7}
 800047c:	4770      	bx	lr
	...

08000480 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b086      	sub	sp, #24
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000488:	4a14      	ldr	r2, [pc, #80]	; (80004dc <_sbrk+0x5c>)
 800048a:	4b15      	ldr	r3, [pc, #84]	; (80004e0 <_sbrk+0x60>)
 800048c:	1ad3      	subs	r3, r2, r3
 800048e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000490:	697b      	ldr	r3, [r7, #20]
 8000492:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000494:	4b13      	ldr	r3, [pc, #76]	; (80004e4 <_sbrk+0x64>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	2b00      	cmp	r3, #0
 800049a:	d102      	bne.n	80004a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800049c:	4b11      	ldr	r3, [pc, #68]	; (80004e4 <_sbrk+0x64>)
 800049e:	4a12      	ldr	r2, [pc, #72]	; (80004e8 <_sbrk+0x68>)
 80004a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004a2:	4b10      	ldr	r3, [pc, #64]	; (80004e4 <_sbrk+0x64>)
 80004a4:	681a      	ldr	r2, [r3, #0]
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	4413      	add	r3, r2
 80004aa:	693a      	ldr	r2, [r7, #16]
 80004ac:	429a      	cmp	r2, r3
 80004ae:	d207      	bcs.n	80004c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004b0:	f000 f96c 	bl	800078c <__errno>
 80004b4:	4603      	mov	r3, r0
 80004b6:	220c      	movs	r2, #12
 80004b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80004be:	e009      	b.n	80004d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004c0:	4b08      	ldr	r3, [pc, #32]	; (80004e4 <_sbrk+0x64>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004c6:	4b07      	ldr	r3, [pc, #28]	; (80004e4 <_sbrk+0x64>)
 80004c8:	681a      	ldr	r2, [r3, #0]
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	4413      	add	r3, r2
 80004ce:	4a05      	ldr	r2, [pc, #20]	; (80004e4 <_sbrk+0x64>)
 80004d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004d2:	68fb      	ldr	r3, [r7, #12]
}
 80004d4:	4618      	mov	r0, r3
 80004d6:	3718      	adds	r7, #24
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	20020000 	.word	0x20020000
 80004e0:	00000400 	.word	0x00000400
 80004e4:	20000090 	.word	0x20000090
 80004e8:	200001e0 	.word	0x200001e0

080004ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004ec:	480d      	ldr	r0, [pc, #52]	; (8000524 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004ee:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004f0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004f4:	480c      	ldr	r0, [pc, #48]	; (8000528 <LoopForever+0x6>)
  ldr r1, =_edata
 80004f6:	490d      	ldr	r1, [pc, #52]	; (800052c <LoopForever+0xa>)
  ldr r2, =_sidata
 80004f8:	4a0d      	ldr	r2, [pc, #52]	; (8000530 <LoopForever+0xe>)
  movs r3, #0
 80004fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004fc:	e002      	b.n	8000504 <LoopCopyDataInit>

080004fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000500:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000502:	3304      	adds	r3, #4

08000504 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000504:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000506:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000508:	d3f9      	bcc.n	80004fe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800050a:	4a0a      	ldr	r2, [pc, #40]	; (8000534 <LoopForever+0x12>)
  ldr r4, =_ebss
 800050c:	4c0a      	ldr	r4, [pc, #40]	; (8000538 <LoopForever+0x16>)
  movs r3, #0
 800050e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000510:	e001      	b.n	8000516 <LoopFillZerobss>

08000512 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000512:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000514:	3204      	adds	r2, #4

08000516 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000516:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000518:	d3fb      	bcc.n	8000512 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800051a:	f000 f93d 	bl	8000798 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800051e:	f7ff fe71 	bl	8000204 <main>

08000522 <LoopForever>:

LoopForever:
  b LoopForever
 8000522:	e7fe      	b.n	8000522 <LoopForever>
  ldr   r0, =_estack
 8000524:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000528:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800052c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000530:	08000ef8 	.word	0x08000ef8
  ldr r2, =_sbss
 8000534:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000538:	200001e0 	.word	0x200001e0

0800053c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800053c:	e7fe      	b.n	800053c <ADC_IRQHandler>
	...

08000540 <std>:
 8000540:	2300      	movs	r3, #0
 8000542:	b510      	push	{r4, lr}
 8000544:	4604      	mov	r4, r0
 8000546:	e9c0 3300 	strd	r3, r3, [r0]
 800054a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800054e:	6083      	str	r3, [r0, #8]
 8000550:	8181      	strh	r1, [r0, #12]
 8000552:	6643      	str	r3, [r0, #100]	; 0x64
 8000554:	81c2      	strh	r2, [r0, #14]
 8000556:	6183      	str	r3, [r0, #24]
 8000558:	4619      	mov	r1, r3
 800055a:	2208      	movs	r2, #8
 800055c:	305c      	adds	r0, #92	; 0x5c
 800055e:	f000 f90d 	bl	800077c <memset>
 8000562:	4b0d      	ldr	r3, [pc, #52]	; (8000598 <std+0x58>)
 8000564:	6263      	str	r3, [r4, #36]	; 0x24
 8000566:	4b0d      	ldr	r3, [pc, #52]	; (800059c <std+0x5c>)
 8000568:	62a3      	str	r3, [r4, #40]	; 0x28
 800056a:	4b0d      	ldr	r3, [pc, #52]	; (80005a0 <std+0x60>)
 800056c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800056e:	4b0d      	ldr	r3, [pc, #52]	; (80005a4 <std+0x64>)
 8000570:	6323      	str	r3, [r4, #48]	; 0x30
 8000572:	4b0d      	ldr	r3, [pc, #52]	; (80005a8 <std+0x68>)
 8000574:	6224      	str	r4, [r4, #32]
 8000576:	429c      	cmp	r4, r3
 8000578:	d006      	beq.n	8000588 <std+0x48>
 800057a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800057e:	4294      	cmp	r4, r2
 8000580:	d002      	beq.n	8000588 <std+0x48>
 8000582:	33d0      	adds	r3, #208	; 0xd0
 8000584:	429c      	cmp	r4, r3
 8000586:	d105      	bne.n	8000594 <std+0x54>
 8000588:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800058c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000590:	f000 b926 	b.w	80007e0 <__retarget_lock_init_recursive>
 8000594:	bd10      	pop	{r4, pc}
 8000596:	bf00      	nop
 8000598:	08000a95 	.word	0x08000a95
 800059c:	08000ab7 	.word	0x08000ab7
 80005a0:	08000aef 	.word	0x08000aef
 80005a4:	08000b13 	.word	0x08000b13
 80005a8:	20000094 	.word	0x20000094

080005ac <stdio_exit_handler>:
 80005ac:	4a02      	ldr	r2, [pc, #8]	; (80005b8 <stdio_exit_handler+0xc>)
 80005ae:	4903      	ldr	r1, [pc, #12]	; (80005bc <stdio_exit_handler+0x10>)
 80005b0:	4803      	ldr	r0, [pc, #12]	; (80005c0 <stdio_exit_handler+0x14>)
 80005b2:	f000 b869 	b.w	8000688 <_fwalk_sglue>
 80005b6:	bf00      	nop
 80005b8:	20000018 	.word	0x20000018
 80005bc:	08000a2d 	.word	0x08000a2d
 80005c0:	20000024 	.word	0x20000024

080005c4 <cleanup_stdio>:
 80005c4:	6841      	ldr	r1, [r0, #4]
 80005c6:	4b0c      	ldr	r3, [pc, #48]	; (80005f8 <cleanup_stdio+0x34>)
 80005c8:	4299      	cmp	r1, r3
 80005ca:	b510      	push	{r4, lr}
 80005cc:	4604      	mov	r4, r0
 80005ce:	d001      	beq.n	80005d4 <cleanup_stdio+0x10>
 80005d0:	f000 fa2c 	bl	8000a2c <_fflush_r>
 80005d4:	68a1      	ldr	r1, [r4, #8]
 80005d6:	4b09      	ldr	r3, [pc, #36]	; (80005fc <cleanup_stdio+0x38>)
 80005d8:	4299      	cmp	r1, r3
 80005da:	d002      	beq.n	80005e2 <cleanup_stdio+0x1e>
 80005dc:	4620      	mov	r0, r4
 80005de:	f000 fa25 	bl	8000a2c <_fflush_r>
 80005e2:	68e1      	ldr	r1, [r4, #12]
 80005e4:	4b06      	ldr	r3, [pc, #24]	; (8000600 <cleanup_stdio+0x3c>)
 80005e6:	4299      	cmp	r1, r3
 80005e8:	d004      	beq.n	80005f4 <cleanup_stdio+0x30>
 80005ea:	4620      	mov	r0, r4
 80005ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80005f0:	f000 ba1c 	b.w	8000a2c <_fflush_r>
 80005f4:	bd10      	pop	{r4, pc}
 80005f6:	bf00      	nop
 80005f8:	20000094 	.word	0x20000094
 80005fc:	200000fc 	.word	0x200000fc
 8000600:	20000164 	.word	0x20000164

08000604 <global_stdio_init.part.0>:
 8000604:	b510      	push	{r4, lr}
 8000606:	4b0b      	ldr	r3, [pc, #44]	; (8000634 <global_stdio_init.part.0+0x30>)
 8000608:	4c0b      	ldr	r4, [pc, #44]	; (8000638 <global_stdio_init.part.0+0x34>)
 800060a:	4a0c      	ldr	r2, [pc, #48]	; (800063c <global_stdio_init.part.0+0x38>)
 800060c:	601a      	str	r2, [r3, #0]
 800060e:	4620      	mov	r0, r4
 8000610:	2200      	movs	r2, #0
 8000612:	2104      	movs	r1, #4
 8000614:	f7ff ff94 	bl	8000540 <std>
 8000618:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800061c:	2201      	movs	r2, #1
 800061e:	2109      	movs	r1, #9
 8000620:	f7ff ff8e 	bl	8000540 <std>
 8000624:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000628:	2202      	movs	r2, #2
 800062a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800062e:	2112      	movs	r1, #18
 8000630:	f7ff bf86 	b.w	8000540 <std>
 8000634:	200001cc 	.word	0x200001cc
 8000638:	20000094 	.word	0x20000094
 800063c:	080005ad 	.word	0x080005ad

08000640 <__sfp_lock_acquire>:
 8000640:	4801      	ldr	r0, [pc, #4]	; (8000648 <__sfp_lock_acquire+0x8>)
 8000642:	f000 b8ce 	b.w	80007e2 <__retarget_lock_acquire_recursive>
 8000646:	bf00      	nop
 8000648:	200001d1 	.word	0x200001d1

0800064c <__sfp_lock_release>:
 800064c:	4801      	ldr	r0, [pc, #4]	; (8000654 <__sfp_lock_release+0x8>)
 800064e:	f000 b8c9 	b.w	80007e4 <__retarget_lock_release_recursive>
 8000652:	bf00      	nop
 8000654:	200001d1 	.word	0x200001d1

08000658 <__sinit>:
 8000658:	b510      	push	{r4, lr}
 800065a:	4604      	mov	r4, r0
 800065c:	f7ff fff0 	bl	8000640 <__sfp_lock_acquire>
 8000660:	6a23      	ldr	r3, [r4, #32]
 8000662:	b11b      	cbz	r3, 800066c <__sinit+0x14>
 8000664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000668:	f7ff bff0 	b.w	800064c <__sfp_lock_release>
 800066c:	4b04      	ldr	r3, [pc, #16]	; (8000680 <__sinit+0x28>)
 800066e:	6223      	str	r3, [r4, #32]
 8000670:	4b04      	ldr	r3, [pc, #16]	; (8000684 <__sinit+0x2c>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d1f5      	bne.n	8000664 <__sinit+0xc>
 8000678:	f7ff ffc4 	bl	8000604 <global_stdio_init.part.0>
 800067c:	e7f2      	b.n	8000664 <__sinit+0xc>
 800067e:	bf00      	nop
 8000680:	080005c5 	.word	0x080005c5
 8000684:	200001cc 	.word	0x200001cc

08000688 <_fwalk_sglue>:
 8000688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800068c:	4607      	mov	r7, r0
 800068e:	4688      	mov	r8, r1
 8000690:	4614      	mov	r4, r2
 8000692:	2600      	movs	r6, #0
 8000694:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000698:	f1b9 0901 	subs.w	r9, r9, #1
 800069c:	d505      	bpl.n	80006aa <_fwalk_sglue+0x22>
 800069e:	6824      	ldr	r4, [r4, #0]
 80006a0:	2c00      	cmp	r4, #0
 80006a2:	d1f7      	bne.n	8000694 <_fwalk_sglue+0xc>
 80006a4:	4630      	mov	r0, r6
 80006a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80006aa:	89ab      	ldrh	r3, [r5, #12]
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d907      	bls.n	80006c0 <_fwalk_sglue+0x38>
 80006b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80006b4:	3301      	adds	r3, #1
 80006b6:	d003      	beq.n	80006c0 <_fwalk_sglue+0x38>
 80006b8:	4629      	mov	r1, r5
 80006ba:	4638      	mov	r0, r7
 80006bc:	47c0      	blx	r8
 80006be:	4306      	orrs	r6, r0
 80006c0:	3568      	adds	r5, #104	; 0x68
 80006c2:	e7e9      	b.n	8000698 <_fwalk_sglue+0x10>

080006c4 <_puts_r>:
 80006c4:	6a03      	ldr	r3, [r0, #32]
 80006c6:	b570      	push	{r4, r5, r6, lr}
 80006c8:	6884      	ldr	r4, [r0, #8]
 80006ca:	4605      	mov	r5, r0
 80006cc:	460e      	mov	r6, r1
 80006ce:	b90b      	cbnz	r3, 80006d4 <_puts_r+0x10>
 80006d0:	f7ff ffc2 	bl	8000658 <__sinit>
 80006d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80006d6:	07db      	lsls	r3, r3, #31
 80006d8:	d405      	bmi.n	80006e6 <_puts_r+0x22>
 80006da:	89a3      	ldrh	r3, [r4, #12]
 80006dc:	0598      	lsls	r0, r3, #22
 80006de:	d402      	bmi.n	80006e6 <_puts_r+0x22>
 80006e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80006e2:	f000 f87e 	bl	80007e2 <__retarget_lock_acquire_recursive>
 80006e6:	89a3      	ldrh	r3, [r4, #12]
 80006e8:	0719      	lsls	r1, r3, #28
 80006ea:	d513      	bpl.n	8000714 <_puts_r+0x50>
 80006ec:	6923      	ldr	r3, [r4, #16]
 80006ee:	b18b      	cbz	r3, 8000714 <_puts_r+0x50>
 80006f0:	3e01      	subs	r6, #1
 80006f2:	68a3      	ldr	r3, [r4, #8]
 80006f4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80006f8:	3b01      	subs	r3, #1
 80006fa:	60a3      	str	r3, [r4, #8]
 80006fc:	b9e9      	cbnz	r1, 800073a <_puts_r+0x76>
 80006fe:	2b00      	cmp	r3, #0
 8000700:	da2e      	bge.n	8000760 <_puts_r+0x9c>
 8000702:	4622      	mov	r2, r4
 8000704:	210a      	movs	r1, #10
 8000706:	4628      	mov	r0, r5
 8000708:	f000 fa07 	bl	8000b1a <__swbuf_r>
 800070c:	3001      	adds	r0, #1
 800070e:	d007      	beq.n	8000720 <_puts_r+0x5c>
 8000710:	250a      	movs	r5, #10
 8000712:	e007      	b.n	8000724 <_puts_r+0x60>
 8000714:	4621      	mov	r1, r4
 8000716:	4628      	mov	r0, r5
 8000718:	f000 fa3c 	bl	8000b94 <__swsetup_r>
 800071c:	2800      	cmp	r0, #0
 800071e:	d0e7      	beq.n	80006f0 <_puts_r+0x2c>
 8000720:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8000724:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000726:	07da      	lsls	r2, r3, #31
 8000728:	d405      	bmi.n	8000736 <_puts_r+0x72>
 800072a:	89a3      	ldrh	r3, [r4, #12]
 800072c:	059b      	lsls	r3, r3, #22
 800072e:	d402      	bmi.n	8000736 <_puts_r+0x72>
 8000730:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000732:	f000 f857 	bl	80007e4 <__retarget_lock_release_recursive>
 8000736:	4628      	mov	r0, r5
 8000738:	bd70      	pop	{r4, r5, r6, pc}
 800073a:	2b00      	cmp	r3, #0
 800073c:	da04      	bge.n	8000748 <_puts_r+0x84>
 800073e:	69a2      	ldr	r2, [r4, #24]
 8000740:	429a      	cmp	r2, r3
 8000742:	dc06      	bgt.n	8000752 <_puts_r+0x8e>
 8000744:	290a      	cmp	r1, #10
 8000746:	d004      	beq.n	8000752 <_puts_r+0x8e>
 8000748:	6823      	ldr	r3, [r4, #0]
 800074a:	1c5a      	adds	r2, r3, #1
 800074c:	6022      	str	r2, [r4, #0]
 800074e:	7019      	strb	r1, [r3, #0]
 8000750:	e7cf      	b.n	80006f2 <_puts_r+0x2e>
 8000752:	4622      	mov	r2, r4
 8000754:	4628      	mov	r0, r5
 8000756:	f000 f9e0 	bl	8000b1a <__swbuf_r>
 800075a:	3001      	adds	r0, #1
 800075c:	d1c9      	bne.n	80006f2 <_puts_r+0x2e>
 800075e:	e7df      	b.n	8000720 <_puts_r+0x5c>
 8000760:	6823      	ldr	r3, [r4, #0]
 8000762:	250a      	movs	r5, #10
 8000764:	1c5a      	adds	r2, r3, #1
 8000766:	6022      	str	r2, [r4, #0]
 8000768:	701d      	strb	r5, [r3, #0]
 800076a:	e7db      	b.n	8000724 <_puts_r+0x60>

0800076c <puts>:
 800076c:	4b02      	ldr	r3, [pc, #8]	; (8000778 <puts+0xc>)
 800076e:	4601      	mov	r1, r0
 8000770:	6818      	ldr	r0, [r3, #0]
 8000772:	f7ff bfa7 	b.w	80006c4 <_puts_r>
 8000776:	bf00      	nop
 8000778:	20000070 	.word	0x20000070

0800077c <memset>:
 800077c:	4402      	add	r2, r0
 800077e:	4603      	mov	r3, r0
 8000780:	4293      	cmp	r3, r2
 8000782:	d100      	bne.n	8000786 <memset+0xa>
 8000784:	4770      	bx	lr
 8000786:	f803 1b01 	strb.w	r1, [r3], #1
 800078a:	e7f9      	b.n	8000780 <memset+0x4>

0800078c <__errno>:
 800078c:	4b01      	ldr	r3, [pc, #4]	; (8000794 <__errno+0x8>)
 800078e:	6818      	ldr	r0, [r3, #0]
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	20000070 	.word	0x20000070

08000798 <__libc_init_array>:
 8000798:	b570      	push	{r4, r5, r6, lr}
 800079a:	4d0d      	ldr	r5, [pc, #52]	; (80007d0 <__libc_init_array+0x38>)
 800079c:	4c0d      	ldr	r4, [pc, #52]	; (80007d4 <__libc_init_array+0x3c>)
 800079e:	1b64      	subs	r4, r4, r5
 80007a0:	10a4      	asrs	r4, r4, #2
 80007a2:	2600      	movs	r6, #0
 80007a4:	42a6      	cmp	r6, r4
 80007a6:	d109      	bne.n	80007bc <__libc_init_array+0x24>
 80007a8:	4d0b      	ldr	r5, [pc, #44]	; (80007d8 <__libc_init_array+0x40>)
 80007aa:	4c0c      	ldr	r4, [pc, #48]	; (80007dc <__libc_init_array+0x44>)
 80007ac:	f000 fb6e 	bl	8000e8c <_init>
 80007b0:	1b64      	subs	r4, r4, r5
 80007b2:	10a4      	asrs	r4, r4, #2
 80007b4:	2600      	movs	r6, #0
 80007b6:	42a6      	cmp	r6, r4
 80007b8:	d105      	bne.n	80007c6 <__libc_init_array+0x2e>
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80007c0:	4798      	blx	r3
 80007c2:	3601      	adds	r6, #1
 80007c4:	e7ee      	b.n	80007a4 <__libc_init_array+0xc>
 80007c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80007ca:	4798      	blx	r3
 80007cc:	3601      	adds	r6, #1
 80007ce:	e7f2      	b.n	80007b6 <__libc_init_array+0x1e>
 80007d0:	08000ef0 	.word	0x08000ef0
 80007d4:	08000ef0 	.word	0x08000ef0
 80007d8:	08000ef0 	.word	0x08000ef0
 80007dc:	08000ef4 	.word	0x08000ef4

080007e0 <__retarget_lock_init_recursive>:
 80007e0:	4770      	bx	lr

080007e2 <__retarget_lock_acquire_recursive>:
 80007e2:	4770      	bx	lr

080007e4 <__retarget_lock_release_recursive>:
 80007e4:	4770      	bx	lr
	...

080007e8 <sbrk_aligned>:
 80007e8:	b570      	push	{r4, r5, r6, lr}
 80007ea:	4e0e      	ldr	r6, [pc, #56]	; (8000824 <sbrk_aligned+0x3c>)
 80007ec:	460c      	mov	r4, r1
 80007ee:	6831      	ldr	r1, [r6, #0]
 80007f0:	4605      	mov	r5, r0
 80007f2:	b911      	cbnz	r1, 80007fa <sbrk_aligned+0x12>
 80007f4:	f000 fade 	bl	8000db4 <_sbrk_r>
 80007f8:	6030      	str	r0, [r6, #0]
 80007fa:	4621      	mov	r1, r4
 80007fc:	4628      	mov	r0, r5
 80007fe:	f000 fad9 	bl	8000db4 <_sbrk_r>
 8000802:	1c43      	adds	r3, r0, #1
 8000804:	d00a      	beq.n	800081c <sbrk_aligned+0x34>
 8000806:	1cc4      	adds	r4, r0, #3
 8000808:	f024 0403 	bic.w	r4, r4, #3
 800080c:	42a0      	cmp	r0, r4
 800080e:	d007      	beq.n	8000820 <sbrk_aligned+0x38>
 8000810:	1a21      	subs	r1, r4, r0
 8000812:	4628      	mov	r0, r5
 8000814:	f000 face 	bl	8000db4 <_sbrk_r>
 8000818:	3001      	adds	r0, #1
 800081a:	d101      	bne.n	8000820 <sbrk_aligned+0x38>
 800081c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000820:	4620      	mov	r0, r4
 8000822:	bd70      	pop	{r4, r5, r6, pc}
 8000824:	200001d8 	.word	0x200001d8

08000828 <_malloc_r>:
 8000828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800082c:	1ccd      	adds	r5, r1, #3
 800082e:	f025 0503 	bic.w	r5, r5, #3
 8000832:	3508      	adds	r5, #8
 8000834:	2d0c      	cmp	r5, #12
 8000836:	bf38      	it	cc
 8000838:	250c      	movcc	r5, #12
 800083a:	2d00      	cmp	r5, #0
 800083c:	4607      	mov	r7, r0
 800083e:	db01      	blt.n	8000844 <_malloc_r+0x1c>
 8000840:	42a9      	cmp	r1, r5
 8000842:	d905      	bls.n	8000850 <_malloc_r+0x28>
 8000844:	230c      	movs	r3, #12
 8000846:	603b      	str	r3, [r7, #0]
 8000848:	2600      	movs	r6, #0
 800084a:	4630      	mov	r0, r6
 800084c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000850:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000924 <_malloc_r+0xfc>
 8000854:	f000 f912 	bl	8000a7c <__malloc_lock>
 8000858:	f8d8 3000 	ldr.w	r3, [r8]
 800085c:	461c      	mov	r4, r3
 800085e:	bb5c      	cbnz	r4, 80008b8 <_malloc_r+0x90>
 8000860:	4629      	mov	r1, r5
 8000862:	4638      	mov	r0, r7
 8000864:	f7ff ffc0 	bl	80007e8 <sbrk_aligned>
 8000868:	1c43      	adds	r3, r0, #1
 800086a:	4604      	mov	r4, r0
 800086c:	d155      	bne.n	800091a <_malloc_r+0xf2>
 800086e:	f8d8 4000 	ldr.w	r4, [r8]
 8000872:	4626      	mov	r6, r4
 8000874:	2e00      	cmp	r6, #0
 8000876:	d145      	bne.n	8000904 <_malloc_r+0xdc>
 8000878:	2c00      	cmp	r4, #0
 800087a:	d048      	beq.n	800090e <_malloc_r+0xe6>
 800087c:	6823      	ldr	r3, [r4, #0]
 800087e:	4631      	mov	r1, r6
 8000880:	4638      	mov	r0, r7
 8000882:	eb04 0903 	add.w	r9, r4, r3
 8000886:	f000 fa95 	bl	8000db4 <_sbrk_r>
 800088a:	4581      	cmp	r9, r0
 800088c:	d13f      	bne.n	800090e <_malloc_r+0xe6>
 800088e:	6821      	ldr	r1, [r4, #0]
 8000890:	1a6d      	subs	r5, r5, r1
 8000892:	4629      	mov	r1, r5
 8000894:	4638      	mov	r0, r7
 8000896:	f7ff ffa7 	bl	80007e8 <sbrk_aligned>
 800089a:	3001      	adds	r0, #1
 800089c:	d037      	beq.n	800090e <_malloc_r+0xe6>
 800089e:	6823      	ldr	r3, [r4, #0]
 80008a0:	442b      	add	r3, r5
 80008a2:	6023      	str	r3, [r4, #0]
 80008a4:	f8d8 3000 	ldr.w	r3, [r8]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d038      	beq.n	800091e <_malloc_r+0xf6>
 80008ac:	685a      	ldr	r2, [r3, #4]
 80008ae:	42a2      	cmp	r2, r4
 80008b0:	d12b      	bne.n	800090a <_malloc_r+0xe2>
 80008b2:	2200      	movs	r2, #0
 80008b4:	605a      	str	r2, [r3, #4]
 80008b6:	e00f      	b.n	80008d8 <_malloc_r+0xb0>
 80008b8:	6822      	ldr	r2, [r4, #0]
 80008ba:	1b52      	subs	r2, r2, r5
 80008bc:	d41f      	bmi.n	80008fe <_malloc_r+0xd6>
 80008be:	2a0b      	cmp	r2, #11
 80008c0:	d917      	bls.n	80008f2 <_malloc_r+0xca>
 80008c2:	1961      	adds	r1, r4, r5
 80008c4:	42a3      	cmp	r3, r4
 80008c6:	6025      	str	r5, [r4, #0]
 80008c8:	bf18      	it	ne
 80008ca:	6059      	strne	r1, [r3, #4]
 80008cc:	6863      	ldr	r3, [r4, #4]
 80008ce:	bf08      	it	eq
 80008d0:	f8c8 1000 	streq.w	r1, [r8]
 80008d4:	5162      	str	r2, [r4, r5]
 80008d6:	604b      	str	r3, [r1, #4]
 80008d8:	4638      	mov	r0, r7
 80008da:	f104 060b 	add.w	r6, r4, #11
 80008de:	f000 f8d3 	bl	8000a88 <__malloc_unlock>
 80008e2:	f026 0607 	bic.w	r6, r6, #7
 80008e6:	1d23      	adds	r3, r4, #4
 80008e8:	1af2      	subs	r2, r6, r3
 80008ea:	d0ae      	beq.n	800084a <_malloc_r+0x22>
 80008ec:	1b9b      	subs	r3, r3, r6
 80008ee:	50a3      	str	r3, [r4, r2]
 80008f0:	e7ab      	b.n	800084a <_malloc_r+0x22>
 80008f2:	42a3      	cmp	r3, r4
 80008f4:	6862      	ldr	r2, [r4, #4]
 80008f6:	d1dd      	bne.n	80008b4 <_malloc_r+0x8c>
 80008f8:	f8c8 2000 	str.w	r2, [r8]
 80008fc:	e7ec      	b.n	80008d8 <_malloc_r+0xb0>
 80008fe:	4623      	mov	r3, r4
 8000900:	6864      	ldr	r4, [r4, #4]
 8000902:	e7ac      	b.n	800085e <_malloc_r+0x36>
 8000904:	4634      	mov	r4, r6
 8000906:	6876      	ldr	r6, [r6, #4]
 8000908:	e7b4      	b.n	8000874 <_malloc_r+0x4c>
 800090a:	4613      	mov	r3, r2
 800090c:	e7cc      	b.n	80008a8 <_malloc_r+0x80>
 800090e:	230c      	movs	r3, #12
 8000910:	603b      	str	r3, [r7, #0]
 8000912:	4638      	mov	r0, r7
 8000914:	f000 f8b8 	bl	8000a88 <__malloc_unlock>
 8000918:	e797      	b.n	800084a <_malloc_r+0x22>
 800091a:	6025      	str	r5, [r4, #0]
 800091c:	e7dc      	b.n	80008d8 <_malloc_r+0xb0>
 800091e:	605b      	str	r3, [r3, #4]
 8000920:	deff      	udf	#255	; 0xff
 8000922:	bf00      	nop
 8000924:	200001d4 	.word	0x200001d4

08000928 <__sflush_r>:
 8000928:	898a      	ldrh	r2, [r1, #12]
 800092a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800092c:	4605      	mov	r5, r0
 800092e:	0710      	lsls	r0, r2, #28
 8000930:	460c      	mov	r4, r1
 8000932:	d457      	bmi.n	80009e4 <__sflush_r+0xbc>
 8000934:	684b      	ldr	r3, [r1, #4]
 8000936:	2b00      	cmp	r3, #0
 8000938:	dc04      	bgt.n	8000944 <__sflush_r+0x1c>
 800093a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800093c:	2b00      	cmp	r3, #0
 800093e:	dc01      	bgt.n	8000944 <__sflush_r+0x1c>
 8000940:	2000      	movs	r0, #0
 8000942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000944:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000946:	2e00      	cmp	r6, #0
 8000948:	d0fa      	beq.n	8000940 <__sflush_r+0x18>
 800094a:	2300      	movs	r3, #0
 800094c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000950:	682f      	ldr	r7, [r5, #0]
 8000952:	6a21      	ldr	r1, [r4, #32]
 8000954:	602b      	str	r3, [r5, #0]
 8000956:	d032      	beq.n	80009be <__sflush_r+0x96>
 8000958:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800095a:	89a3      	ldrh	r3, [r4, #12]
 800095c:	075a      	lsls	r2, r3, #29
 800095e:	d505      	bpl.n	800096c <__sflush_r+0x44>
 8000960:	6863      	ldr	r3, [r4, #4]
 8000962:	1ac0      	subs	r0, r0, r3
 8000964:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000966:	b10b      	cbz	r3, 800096c <__sflush_r+0x44>
 8000968:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800096a:	1ac0      	subs	r0, r0, r3
 800096c:	2300      	movs	r3, #0
 800096e:	4602      	mov	r2, r0
 8000970:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000972:	6a21      	ldr	r1, [r4, #32]
 8000974:	4628      	mov	r0, r5
 8000976:	47b0      	blx	r6
 8000978:	1c43      	adds	r3, r0, #1
 800097a:	89a3      	ldrh	r3, [r4, #12]
 800097c:	d106      	bne.n	800098c <__sflush_r+0x64>
 800097e:	6829      	ldr	r1, [r5, #0]
 8000980:	291d      	cmp	r1, #29
 8000982:	d82b      	bhi.n	80009dc <__sflush_r+0xb4>
 8000984:	4a28      	ldr	r2, [pc, #160]	; (8000a28 <__sflush_r+0x100>)
 8000986:	410a      	asrs	r2, r1
 8000988:	07d6      	lsls	r6, r2, #31
 800098a:	d427      	bmi.n	80009dc <__sflush_r+0xb4>
 800098c:	2200      	movs	r2, #0
 800098e:	6062      	str	r2, [r4, #4]
 8000990:	04d9      	lsls	r1, r3, #19
 8000992:	6922      	ldr	r2, [r4, #16]
 8000994:	6022      	str	r2, [r4, #0]
 8000996:	d504      	bpl.n	80009a2 <__sflush_r+0x7a>
 8000998:	1c42      	adds	r2, r0, #1
 800099a:	d101      	bne.n	80009a0 <__sflush_r+0x78>
 800099c:	682b      	ldr	r3, [r5, #0]
 800099e:	b903      	cbnz	r3, 80009a2 <__sflush_r+0x7a>
 80009a0:	6560      	str	r0, [r4, #84]	; 0x54
 80009a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80009a4:	602f      	str	r7, [r5, #0]
 80009a6:	2900      	cmp	r1, #0
 80009a8:	d0ca      	beq.n	8000940 <__sflush_r+0x18>
 80009aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80009ae:	4299      	cmp	r1, r3
 80009b0:	d002      	beq.n	80009b8 <__sflush_r+0x90>
 80009b2:	4628      	mov	r0, r5
 80009b4:	f000 fa20 	bl	8000df8 <_free_r>
 80009b8:	2000      	movs	r0, #0
 80009ba:	6360      	str	r0, [r4, #52]	; 0x34
 80009bc:	e7c1      	b.n	8000942 <__sflush_r+0x1a>
 80009be:	2301      	movs	r3, #1
 80009c0:	4628      	mov	r0, r5
 80009c2:	47b0      	blx	r6
 80009c4:	1c41      	adds	r1, r0, #1
 80009c6:	d1c8      	bne.n	800095a <__sflush_r+0x32>
 80009c8:	682b      	ldr	r3, [r5, #0]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d0c5      	beq.n	800095a <__sflush_r+0x32>
 80009ce:	2b1d      	cmp	r3, #29
 80009d0:	d001      	beq.n	80009d6 <__sflush_r+0xae>
 80009d2:	2b16      	cmp	r3, #22
 80009d4:	d101      	bne.n	80009da <__sflush_r+0xb2>
 80009d6:	602f      	str	r7, [r5, #0]
 80009d8:	e7b2      	b.n	8000940 <__sflush_r+0x18>
 80009da:	89a3      	ldrh	r3, [r4, #12]
 80009dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009e0:	81a3      	strh	r3, [r4, #12]
 80009e2:	e7ae      	b.n	8000942 <__sflush_r+0x1a>
 80009e4:	690f      	ldr	r7, [r1, #16]
 80009e6:	2f00      	cmp	r7, #0
 80009e8:	d0aa      	beq.n	8000940 <__sflush_r+0x18>
 80009ea:	0793      	lsls	r3, r2, #30
 80009ec:	680e      	ldr	r6, [r1, #0]
 80009ee:	bf08      	it	eq
 80009f0:	694b      	ldreq	r3, [r1, #20]
 80009f2:	600f      	str	r7, [r1, #0]
 80009f4:	bf18      	it	ne
 80009f6:	2300      	movne	r3, #0
 80009f8:	1bf6      	subs	r6, r6, r7
 80009fa:	608b      	str	r3, [r1, #8]
 80009fc:	2e00      	cmp	r6, #0
 80009fe:	dd9f      	ble.n	8000940 <__sflush_r+0x18>
 8000a00:	6a21      	ldr	r1, [r4, #32]
 8000a02:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8000a06:	4633      	mov	r3, r6
 8000a08:	463a      	mov	r2, r7
 8000a0a:	4628      	mov	r0, r5
 8000a0c:	47e0      	blx	ip
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	dc06      	bgt.n	8000a20 <__sflush_r+0xf8>
 8000a12:	89a3      	ldrh	r3, [r4, #12]
 8000a14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a18:	81a3      	strh	r3, [r4, #12]
 8000a1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a1e:	e790      	b.n	8000942 <__sflush_r+0x1a>
 8000a20:	4407      	add	r7, r0
 8000a22:	1a36      	subs	r6, r6, r0
 8000a24:	e7ea      	b.n	80009fc <__sflush_r+0xd4>
 8000a26:	bf00      	nop
 8000a28:	dfbffffe 	.word	0xdfbffffe

08000a2c <_fflush_r>:
 8000a2c:	b538      	push	{r3, r4, r5, lr}
 8000a2e:	690b      	ldr	r3, [r1, #16]
 8000a30:	4605      	mov	r5, r0
 8000a32:	460c      	mov	r4, r1
 8000a34:	b913      	cbnz	r3, 8000a3c <_fflush_r+0x10>
 8000a36:	2500      	movs	r5, #0
 8000a38:	4628      	mov	r0, r5
 8000a3a:	bd38      	pop	{r3, r4, r5, pc}
 8000a3c:	b118      	cbz	r0, 8000a46 <_fflush_r+0x1a>
 8000a3e:	6a03      	ldr	r3, [r0, #32]
 8000a40:	b90b      	cbnz	r3, 8000a46 <_fflush_r+0x1a>
 8000a42:	f7ff fe09 	bl	8000658 <__sinit>
 8000a46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d0f3      	beq.n	8000a36 <_fflush_r+0xa>
 8000a4e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000a50:	07d0      	lsls	r0, r2, #31
 8000a52:	d404      	bmi.n	8000a5e <_fflush_r+0x32>
 8000a54:	0599      	lsls	r1, r3, #22
 8000a56:	d402      	bmi.n	8000a5e <_fflush_r+0x32>
 8000a58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000a5a:	f7ff fec2 	bl	80007e2 <__retarget_lock_acquire_recursive>
 8000a5e:	4628      	mov	r0, r5
 8000a60:	4621      	mov	r1, r4
 8000a62:	f7ff ff61 	bl	8000928 <__sflush_r>
 8000a66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000a68:	07da      	lsls	r2, r3, #31
 8000a6a:	4605      	mov	r5, r0
 8000a6c:	d4e4      	bmi.n	8000a38 <_fflush_r+0xc>
 8000a6e:	89a3      	ldrh	r3, [r4, #12]
 8000a70:	059b      	lsls	r3, r3, #22
 8000a72:	d4e1      	bmi.n	8000a38 <_fflush_r+0xc>
 8000a74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000a76:	f7ff feb5 	bl	80007e4 <__retarget_lock_release_recursive>
 8000a7a:	e7dd      	b.n	8000a38 <_fflush_r+0xc>

08000a7c <__malloc_lock>:
 8000a7c:	4801      	ldr	r0, [pc, #4]	; (8000a84 <__malloc_lock+0x8>)
 8000a7e:	f7ff beb0 	b.w	80007e2 <__retarget_lock_acquire_recursive>
 8000a82:	bf00      	nop
 8000a84:	200001d0 	.word	0x200001d0

08000a88 <__malloc_unlock>:
 8000a88:	4801      	ldr	r0, [pc, #4]	; (8000a90 <__malloc_unlock+0x8>)
 8000a8a:	f7ff beab 	b.w	80007e4 <__retarget_lock_release_recursive>
 8000a8e:	bf00      	nop
 8000a90:	200001d0 	.word	0x200001d0

08000a94 <__sread>:
 8000a94:	b510      	push	{r4, lr}
 8000a96:	460c      	mov	r4, r1
 8000a98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a9c:	f000 f978 	bl	8000d90 <_read_r>
 8000aa0:	2800      	cmp	r0, #0
 8000aa2:	bfab      	itete	ge
 8000aa4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000aa6:	89a3      	ldrhlt	r3, [r4, #12]
 8000aa8:	181b      	addge	r3, r3, r0
 8000aaa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000aae:	bfac      	ite	ge
 8000ab0:	6563      	strge	r3, [r4, #84]	; 0x54
 8000ab2:	81a3      	strhlt	r3, [r4, #12]
 8000ab4:	bd10      	pop	{r4, pc}

08000ab6 <__swrite>:
 8000ab6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000aba:	461f      	mov	r7, r3
 8000abc:	898b      	ldrh	r3, [r1, #12]
 8000abe:	05db      	lsls	r3, r3, #23
 8000ac0:	4605      	mov	r5, r0
 8000ac2:	460c      	mov	r4, r1
 8000ac4:	4616      	mov	r6, r2
 8000ac6:	d505      	bpl.n	8000ad4 <__swrite+0x1e>
 8000ac8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000acc:	2302      	movs	r3, #2
 8000ace:	2200      	movs	r2, #0
 8000ad0:	f000 f94c 	bl	8000d6c <_lseek_r>
 8000ad4:	89a3      	ldrh	r3, [r4, #12]
 8000ad6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000ada:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000ade:	81a3      	strh	r3, [r4, #12]
 8000ae0:	4632      	mov	r2, r6
 8000ae2:	463b      	mov	r3, r7
 8000ae4:	4628      	mov	r0, r5
 8000ae6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000aea:	f000 b973 	b.w	8000dd4 <_write_r>

08000aee <__sseek>:
 8000aee:	b510      	push	{r4, lr}
 8000af0:	460c      	mov	r4, r1
 8000af2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000af6:	f000 f939 	bl	8000d6c <_lseek_r>
 8000afa:	1c43      	adds	r3, r0, #1
 8000afc:	89a3      	ldrh	r3, [r4, #12]
 8000afe:	bf15      	itete	ne
 8000b00:	6560      	strne	r0, [r4, #84]	; 0x54
 8000b02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000b06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000b0a:	81a3      	strheq	r3, [r4, #12]
 8000b0c:	bf18      	it	ne
 8000b0e:	81a3      	strhne	r3, [r4, #12]
 8000b10:	bd10      	pop	{r4, pc}

08000b12 <__sclose>:
 8000b12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000b16:	f000 b8f7 	b.w	8000d08 <_close_r>

08000b1a <__swbuf_r>:
 8000b1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b1c:	460e      	mov	r6, r1
 8000b1e:	4614      	mov	r4, r2
 8000b20:	4605      	mov	r5, r0
 8000b22:	b118      	cbz	r0, 8000b2c <__swbuf_r+0x12>
 8000b24:	6a03      	ldr	r3, [r0, #32]
 8000b26:	b90b      	cbnz	r3, 8000b2c <__swbuf_r+0x12>
 8000b28:	f7ff fd96 	bl	8000658 <__sinit>
 8000b2c:	69a3      	ldr	r3, [r4, #24]
 8000b2e:	60a3      	str	r3, [r4, #8]
 8000b30:	89a3      	ldrh	r3, [r4, #12]
 8000b32:	071a      	lsls	r2, r3, #28
 8000b34:	d525      	bpl.n	8000b82 <__swbuf_r+0x68>
 8000b36:	6923      	ldr	r3, [r4, #16]
 8000b38:	b31b      	cbz	r3, 8000b82 <__swbuf_r+0x68>
 8000b3a:	6823      	ldr	r3, [r4, #0]
 8000b3c:	6922      	ldr	r2, [r4, #16]
 8000b3e:	1a98      	subs	r0, r3, r2
 8000b40:	6963      	ldr	r3, [r4, #20]
 8000b42:	b2f6      	uxtb	r6, r6
 8000b44:	4283      	cmp	r3, r0
 8000b46:	4637      	mov	r7, r6
 8000b48:	dc04      	bgt.n	8000b54 <__swbuf_r+0x3a>
 8000b4a:	4621      	mov	r1, r4
 8000b4c:	4628      	mov	r0, r5
 8000b4e:	f7ff ff6d 	bl	8000a2c <_fflush_r>
 8000b52:	b9e0      	cbnz	r0, 8000b8e <__swbuf_r+0x74>
 8000b54:	68a3      	ldr	r3, [r4, #8]
 8000b56:	3b01      	subs	r3, #1
 8000b58:	60a3      	str	r3, [r4, #8]
 8000b5a:	6823      	ldr	r3, [r4, #0]
 8000b5c:	1c5a      	adds	r2, r3, #1
 8000b5e:	6022      	str	r2, [r4, #0]
 8000b60:	701e      	strb	r6, [r3, #0]
 8000b62:	6962      	ldr	r2, [r4, #20]
 8000b64:	1c43      	adds	r3, r0, #1
 8000b66:	429a      	cmp	r2, r3
 8000b68:	d004      	beq.n	8000b74 <__swbuf_r+0x5a>
 8000b6a:	89a3      	ldrh	r3, [r4, #12]
 8000b6c:	07db      	lsls	r3, r3, #31
 8000b6e:	d506      	bpl.n	8000b7e <__swbuf_r+0x64>
 8000b70:	2e0a      	cmp	r6, #10
 8000b72:	d104      	bne.n	8000b7e <__swbuf_r+0x64>
 8000b74:	4621      	mov	r1, r4
 8000b76:	4628      	mov	r0, r5
 8000b78:	f7ff ff58 	bl	8000a2c <_fflush_r>
 8000b7c:	b938      	cbnz	r0, 8000b8e <__swbuf_r+0x74>
 8000b7e:	4638      	mov	r0, r7
 8000b80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b82:	4621      	mov	r1, r4
 8000b84:	4628      	mov	r0, r5
 8000b86:	f000 f805 	bl	8000b94 <__swsetup_r>
 8000b8a:	2800      	cmp	r0, #0
 8000b8c:	d0d5      	beq.n	8000b3a <__swbuf_r+0x20>
 8000b8e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8000b92:	e7f4      	b.n	8000b7e <__swbuf_r+0x64>

08000b94 <__swsetup_r>:
 8000b94:	b538      	push	{r3, r4, r5, lr}
 8000b96:	4b2a      	ldr	r3, [pc, #168]	; (8000c40 <__swsetup_r+0xac>)
 8000b98:	4605      	mov	r5, r0
 8000b9a:	6818      	ldr	r0, [r3, #0]
 8000b9c:	460c      	mov	r4, r1
 8000b9e:	b118      	cbz	r0, 8000ba8 <__swsetup_r+0x14>
 8000ba0:	6a03      	ldr	r3, [r0, #32]
 8000ba2:	b90b      	cbnz	r3, 8000ba8 <__swsetup_r+0x14>
 8000ba4:	f7ff fd58 	bl	8000658 <__sinit>
 8000ba8:	89a3      	ldrh	r3, [r4, #12]
 8000baa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000bae:	0718      	lsls	r0, r3, #28
 8000bb0:	d422      	bmi.n	8000bf8 <__swsetup_r+0x64>
 8000bb2:	06d9      	lsls	r1, r3, #27
 8000bb4:	d407      	bmi.n	8000bc6 <__swsetup_r+0x32>
 8000bb6:	2309      	movs	r3, #9
 8000bb8:	602b      	str	r3, [r5, #0]
 8000bba:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000bbe:	81a3      	strh	r3, [r4, #12]
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bc4:	e034      	b.n	8000c30 <__swsetup_r+0x9c>
 8000bc6:	0758      	lsls	r0, r3, #29
 8000bc8:	d512      	bpl.n	8000bf0 <__swsetup_r+0x5c>
 8000bca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000bcc:	b141      	cbz	r1, 8000be0 <__swsetup_r+0x4c>
 8000bce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000bd2:	4299      	cmp	r1, r3
 8000bd4:	d002      	beq.n	8000bdc <__swsetup_r+0x48>
 8000bd6:	4628      	mov	r0, r5
 8000bd8:	f000 f90e 	bl	8000df8 <_free_r>
 8000bdc:	2300      	movs	r3, #0
 8000bde:	6363      	str	r3, [r4, #52]	; 0x34
 8000be0:	89a3      	ldrh	r3, [r4, #12]
 8000be2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000be6:	81a3      	strh	r3, [r4, #12]
 8000be8:	2300      	movs	r3, #0
 8000bea:	6063      	str	r3, [r4, #4]
 8000bec:	6923      	ldr	r3, [r4, #16]
 8000bee:	6023      	str	r3, [r4, #0]
 8000bf0:	89a3      	ldrh	r3, [r4, #12]
 8000bf2:	f043 0308 	orr.w	r3, r3, #8
 8000bf6:	81a3      	strh	r3, [r4, #12]
 8000bf8:	6923      	ldr	r3, [r4, #16]
 8000bfa:	b94b      	cbnz	r3, 8000c10 <__swsetup_r+0x7c>
 8000bfc:	89a3      	ldrh	r3, [r4, #12]
 8000bfe:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000c02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c06:	d003      	beq.n	8000c10 <__swsetup_r+0x7c>
 8000c08:	4621      	mov	r1, r4
 8000c0a:	4628      	mov	r0, r5
 8000c0c:	f000 f840 	bl	8000c90 <__smakebuf_r>
 8000c10:	89a0      	ldrh	r0, [r4, #12]
 8000c12:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000c16:	f010 0301 	ands.w	r3, r0, #1
 8000c1a:	d00a      	beq.n	8000c32 <__swsetup_r+0x9e>
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	60a3      	str	r3, [r4, #8]
 8000c20:	6963      	ldr	r3, [r4, #20]
 8000c22:	425b      	negs	r3, r3
 8000c24:	61a3      	str	r3, [r4, #24]
 8000c26:	6923      	ldr	r3, [r4, #16]
 8000c28:	b943      	cbnz	r3, 8000c3c <__swsetup_r+0xa8>
 8000c2a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000c2e:	d1c4      	bne.n	8000bba <__swsetup_r+0x26>
 8000c30:	bd38      	pop	{r3, r4, r5, pc}
 8000c32:	0781      	lsls	r1, r0, #30
 8000c34:	bf58      	it	pl
 8000c36:	6963      	ldrpl	r3, [r4, #20]
 8000c38:	60a3      	str	r3, [r4, #8]
 8000c3a:	e7f4      	b.n	8000c26 <__swsetup_r+0x92>
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	e7f7      	b.n	8000c30 <__swsetup_r+0x9c>
 8000c40:	20000070 	.word	0x20000070

08000c44 <__swhatbuf_r>:
 8000c44:	b570      	push	{r4, r5, r6, lr}
 8000c46:	460c      	mov	r4, r1
 8000c48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	b096      	sub	sp, #88	; 0x58
 8000c50:	4615      	mov	r5, r2
 8000c52:	461e      	mov	r6, r3
 8000c54:	da0d      	bge.n	8000c72 <__swhatbuf_r+0x2e>
 8000c56:	89a3      	ldrh	r3, [r4, #12]
 8000c58:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000c5c:	f04f 0100 	mov.w	r1, #0
 8000c60:	bf0c      	ite	eq
 8000c62:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8000c66:	2340      	movne	r3, #64	; 0x40
 8000c68:	2000      	movs	r0, #0
 8000c6a:	6031      	str	r1, [r6, #0]
 8000c6c:	602b      	str	r3, [r5, #0]
 8000c6e:	b016      	add	sp, #88	; 0x58
 8000c70:	bd70      	pop	{r4, r5, r6, pc}
 8000c72:	466a      	mov	r2, sp
 8000c74:	f000 f858 	bl	8000d28 <_fstat_r>
 8000c78:	2800      	cmp	r0, #0
 8000c7a:	dbec      	blt.n	8000c56 <__swhatbuf_r+0x12>
 8000c7c:	9901      	ldr	r1, [sp, #4]
 8000c7e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8000c82:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8000c86:	4259      	negs	r1, r3
 8000c88:	4159      	adcs	r1, r3
 8000c8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c8e:	e7eb      	b.n	8000c68 <__swhatbuf_r+0x24>

08000c90 <__smakebuf_r>:
 8000c90:	898b      	ldrh	r3, [r1, #12]
 8000c92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000c94:	079d      	lsls	r5, r3, #30
 8000c96:	4606      	mov	r6, r0
 8000c98:	460c      	mov	r4, r1
 8000c9a:	d507      	bpl.n	8000cac <__smakebuf_r+0x1c>
 8000c9c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000ca0:	6023      	str	r3, [r4, #0]
 8000ca2:	6123      	str	r3, [r4, #16]
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	6163      	str	r3, [r4, #20]
 8000ca8:	b002      	add	sp, #8
 8000caa:	bd70      	pop	{r4, r5, r6, pc}
 8000cac:	ab01      	add	r3, sp, #4
 8000cae:	466a      	mov	r2, sp
 8000cb0:	f7ff ffc8 	bl	8000c44 <__swhatbuf_r>
 8000cb4:	9900      	ldr	r1, [sp, #0]
 8000cb6:	4605      	mov	r5, r0
 8000cb8:	4630      	mov	r0, r6
 8000cba:	f7ff fdb5 	bl	8000828 <_malloc_r>
 8000cbe:	b948      	cbnz	r0, 8000cd4 <__smakebuf_r+0x44>
 8000cc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000cc4:	059a      	lsls	r2, r3, #22
 8000cc6:	d4ef      	bmi.n	8000ca8 <__smakebuf_r+0x18>
 8000cc8:	f023 0303 	bic.w	r3, r3, #3
 8000ccc:	f043 0302 	orr.w	r3, r3, #2
 8000cd0:	81a3      	strh	r3, [r4, #12]
 8000cd2:	e7e3      	b.n	8000c9c <__smakebuf_r+0xc>
 8000cd4:	89a3      	ldrh	r3, [r4, #12]
 8000cd6:	6020      	str	r0, [r4, #0]
 8000cd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cdc:	81a3      	strh	r3, [r4, #12]
 8000cde:	9b00      	ldr	r3, [sp, #0]
 8000ce0:	6163      	str	r3, [r4, #20]
 8000ce2:	9b01      	ldr	r3, [sp, #4]
 8000ce4:	6120      	str	r0, [r4, #16]
 8000ce6:	b15b      	cbz	r3, 8000d00 <__smakebuf_r+0x70>
 8000ce8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000cec:	4630      	mov	r0, r6
 8000cee:	f000 f82d 	bl	8000d4c <_isatty_r>
 8000cf2:	b128      	cbz	r0, 8000d00 <__smakebuf_r+0x70>
 8000cf4:	89a3      	ldrh	r3, [r4, #12]
 8000cf6:	f023 0303 	bic.w	r3, r3, #3
 8000cfa:	f043 0301 	orr.w	r3, r3, #1
 8000cfe:	81a3      	strh	r3, [r4, #12]
 8000d00:	89a3      	ldrh	r3, [r4, #12]
 8000d02:	431d      	orrs	r5, r3
 8000d04:	81a5      	strh	r5, [r4, #12]
 8000d06:	e7cf      	b.n	8000ca8 <__smakebuf_r+0x18>

08000d08 <_close_r>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	4d06      	ldr	r5, [pc, #24]	; (8000d24 <_close_r+0x1c>)
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	4608      	mov	r0, r1
 8000d12:	602b      	str	r3, [r5, #0]
 8000d14:	f7ff fb83 	bl	800041e <_close>
 8000d18:	1c43      	adds	r3, r0, #1
 8000d1a:	d102      	bne.n	8000d22 <_close_r+0x1a>
 8000d1c:	682b      	ldr	r3, [r5, #0]
 8000d1e:	b103      	cbz	r3, 8000d22 <_close_r+0x1a>
 8000d20:	6023      	str	r3, [r4, #0]
 8000d22:	bd38      	pop	{r3, r4, r5, pc}
 8000d24:	200001dc 	.word	0x200001dc

08000d28 <_fstat_r>:
 8000d28:	b538      	push	{r3, r4, r5, lr}
 8000d2a:	4d07      	ldr	r5, [pc, #28]	; (8000d48 <_fstat_r+0x20>)
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	4604      	mov	r4, r0
 8000d30:	4608      	mov	r0, r1
 8000d32:	4611      	mov	r1, r2
 8000d34:	602b      	str	r3, [r5, #0]
 8000d36:	f7ff fb7d 	bl	8000434 <_fstat>
 8000d3a:	1c43      	adds	r3, r0, #1
 8000d3c:	d102      	bne.n	8000d44 <_fstat_r+0x1c>
 8000d3e:	682b      	ldr	r3, [r5, #0]
 8000d40:	b103      	cbz	r3, 8000d44 <_fstat_r+0x1c>
 8000d42:	6023      	str	r3, [r4, #0]
 8000d44:	bd38      	pop	{r3, r4, r5, pc}
 8000d46:	bf00      	nop
 8000d48:	200001dc 	.word	0x200001dc

08000d4c <_isatty_r>:
 8000d4c:	b538      	push	{r3, r4, r5, lr}
 8000d4e:	4d06      	ldr	r5, [pc, #24]	; (8000d68 <_isatty_r+0x1c>)
 8000d50:	2300      	movs	r3, #0
 8000d52:	4604      	mov	r4, r0
 8000d54:	4608      	mov	r0, r1
 8000d56:	602b      	str	r3, [r5, #0]
 8000d58:	f7ff fb7b 	bl	8000452 <_isatty>
 8000d5c:	1c43      	adds	r3, r0, #1
 8000d5e:	d102      	bne.n	8000d66 <_isatty_r+0x1a>
 8000d60:	682b      	ldr	r3, [r5, #0]
 8000d62:	b103      	cbz	r3, 8000d66 <_isatty_r+0x1a>
 8000d64:	6023      	str	r3, [r4, #0]
 8000d66:	bd38      	pop	{r3, r4, r5, pc}
 8000d68:	200001dc 	.word	0x200001dc

08000d6c <_lseek_r>:
 8000d6c:	b538      	push	{r3, r4, r5, lr}
 8000d6e:	4d07      	ldr	r5, [pc, #28]	; (8000d8c <_lseek_r+0x20>)
 8000d70:	4604      	mov	r4, r0
 8000d72:	4608      	mov	r0, r1
 8000d74:	4611      	mov	r1, r2
 8000d76:	2200      	movs	r2, #0
 8000d78:	602a      	str	r2, [r5, #0]
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	f7ff fb73 	bl	8000466 <_lseek>
 8000d80:	1c43      	adds	r3, r0, #1
 8000d82:	d102      	bne.n	8000d8a <_lseek_r+0x1e>
 8000d84:	682b      	ldr	r3, [r5, #0]
 8000d86:	b103      	cbz	r3, 8000d8a <_lseek_r+0x1e>
 8000d88:	6023      	str	r3, [r4, #0]
 8000d8a:	bd38      	pop	{r3, r4, r5, pc}
 8000d8c:	200001dc 	.word	0x200001dc

08000d90 <_read_r>:
 8000d90:	b538      	push	{r3, r4, r5, lr}
 8000d92:	4d07      	ldr	r5, [pc, #28]	; (8000db0 <_read_r+0x20>)
 8000d94:	4604      	mov	r4, r0
 8000d96:	4608      	mov	r0, r1
 8000d98:	4611      	mov	r1, r2
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	602a      	str	r2, [r5, #0]
 8000d9e:	461a      	mov	r2, r3
 8000da0:	f7ff fb04 	bl	80003ac <_read>
 8000da4:	1c43      	adds	r3, r0, #1
 8000da6:	d102      	bne.n	8000dae <_read_r+0x1e>
 8000da8:	682b      	ldr	r3, [r5, #0]
 8000daa:	b103      	cbz	r3, 8000dae <_read_r+0x1e>
 8000dac:	6023      	str	r3, [r4, #0]
 8000dae:	bd38      	pop	{r3, r4, r5, pc}
 8000db0:	200001dc 	.word	0x200001dc

08000db4 <_sbrk_r>:
 8000db4:	b538      	push	{r3, r4, r5, lr}
 8000db6:	4d06      	ldr	r5, [pc, #24]	; (8000dd0 <_sbrk_r+0x1c>)
 8000db8:	2300      	movs	r3, #0
 8000dba:	4604      	mov	r4, r0
 8000dbc:	4608      	mov	r0, r1
 8000dbe:	602b      	str	r3, [r5, #0]
 8000dc0:	f7ff fb5e 	bl	8000480 <_sbrk>
 8000dc4:	1c43      	adds	r3, r0, #1
 8000dc6:	d102      	bne.n	8000dce <_sbrk_r+0x1a>
 8000dc8:	682b      	ldr	r3, [r5, #0]
 8000dca:	b103      	cbz	r3, 8000dce <_sbrk_r+0x1a>
 8000dcc:	6023      	str	r3, [r4, #0]
 8000dce:	bd38      	pop	{r3, r4, r5, pc}
 8000dd0:	200001dc 	.word	0x200001dc

08000dd4 <_write_r>:
 8000dd4:	b538      	push	{r3, r4, r5, lr}
 8000dd6:	4d07      	ldr	r5, [pc, #28]	; (8000df4 <_write_r+0x20>)
 8000dd8:	4604      	mov	r4, r0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	4611      	mov	r1, r2
 8000dde:	2200      	movs	r2, #0
 8000de0:	602a      	str	r2, [r5, #0]
 8000de2:	461a      	mov	r2, r3
 8000de4:	f7ff faff 	bl	80003e6 <_write>
 8000de8:	1c43      	adds	r3, r0, #1
 8000dea:	d102      	bne.n	8000df2 <_write_r+0x1e>
 8000dec:	682b      	ldr	r3, [r5, #0]
 8000dee:	b103      	cbz	r3, 8000df2 <_write_r+0x1e>
 8000df0:	6023      	str	r3, [r4, #0]
 8000df2:	bd38      	pop	{r3, r4, r5, pc}
 8000df4:	200001dc 	.word	0x200001dc

08000df8 <_free_r>:
 8000df8:	b538      	push	{r3, r4, r5, lr}
 8000dfa:	4605      	mov	r5, r0
 8000dfc:	2900      	cmp	r1, #0
 8000dfe:	d041      	beq.n	8000e84 <_free_r+0x8c>
 8000e00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000e04:	1f0c      	subs	r4, r1, #4
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	bfb8      	it	lt
 8000e0a:	18e4      	addlt	r4, r4, r3
 8000e0c:	f7ff fe36 	bl	8000a7c <__malloc_lock>
 8000e10:	4a1d      	ldr	r2, [pc, #116]	; (8000e88 <_free_r+0x90>)
 8000e12:	6813      	ldr	r3, [r2, #0]
 8000e14:	b933      	cbnz	r3, 8000e24 <_free_r+0x2c>
 8000e16:	6063      	str	r3, [r4, #4]
 8000e18:	6014      	str	r4, [r2, #0]
 8000e1a:	4628      	mov	r0, r5
 8000e1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000e20:	f7ff be32 	b.w	8000a88 <__malloc_unlock>
 8000e24:	42a3      	cmp	r3, r4
 8000e26:	d908      	bls.n	8000e3a <_free_r+0x42>
 8000e28:	6820      	ldr	r0, [r4, #0]
 8000e2a:	1821      	adds	r1, r4, r0
 8000e2c:	428b      	cmp	r3, r1
 8000e2e:	bf01      	itttt	eq
 8000e30:	6819      	ldreq	r1, [r3, #0]
 8000e32:	685b      	ldreq	r3, [r3, #4]
 8000e34:	1809      	addeq	r1, r1, r0
 8000e36:	6021      	streq	r1, [r4, #0]
 8000e38:	e7ed      	b.n	8000e16 <_free_r+0x1e>
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	b10b      	cbz	r3, 8000e44 <_free_r+0x4c>
 8000e40:	42a3      	cmp	r3, r4
 8000e42:	d9fa      	bls.n	8000e3a <_free_r+0x42>
 8000e44:	6811      	ldr	r1, [r2, #0]
 8000e46:	1850      	adds	r0, r2, r1
 8000e48:	42a0      	cmp	r0, r4
 8000e4a:	d10b      	bne.n	8000e64 <_free_r+0x6c>
 8000e4c:	6820      	ldr	r0, [r4, #0]
 8000e4e:	4401      	add	r1, r0
 8000e50:	1850      	adds	r0, r2, r1
 8000e52:	4283      	cmp	r3, r0
 8000e54:	6011      	str	r1, [r2, #0]
 8000e56:	d1e0      	bne.n	8000e1a <_free_r+0x22>
 8000e58:	6818      	ldr	r0, [r3, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	6053      	str	r3, [r2, #4]
 8000e5e:	4408      	add	r0, r1
 8000e60:	6010      	str	r0, [r2, #0]
 8000e62:	e7da      	b.n	8000e1a <_free_r+0x22>
 8000e64:	d902      	bls.n	8000e6c <_free_r+0x74>
 8000e66:	230c      	movs	r3, #12
 8000e68:	602b      	str	r3, [r5, #0]
 8000e6a:	e7d6      	b.n	8000e1a <_free_r+0x22>
 8000e6c:	6820      	ldr	r0, [r4, #0]
 8000e6e:	1821      	adds	r1, r4, r0
 8000e70:	428b      	cmp	r3, r1
 8000e72:	bf04      	itt	eq
 8000e74:	6819      	ldreq	r1, [r3, #0]
 8000e76:	685b      	ldreq	r3, [r3, #4]
 8000e78:	6063      	str	r3, [r4, #4]
 8000e7a:	bf04      	itt	eq
 8000e7c:	1809      	addeq	r1, r1, r0
 8000e7e:	6021      	streq	r1, [r4, #0]
 8000e80:	6054      	str	r4, [r2, #4]
 8000e82:	e7ca      	b.n	8000e1a <_free_r+0x22>
 8000e84:	bd38      	pop	{r3, r4, r5, pc}
 8000e86:	bf00      	nop
 8000e88:	200001d4 	.word	0x200001d4

08000e8c <_init>:
 8000e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e8e:	bf00      	nop
 8000e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e92:	bc08      	pop	{r3}
 8000e94:	469e      	mov	lr, r3
 8000e96:	4770      	bx	lr

08000e98 <_fini>:
 8000e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e9a:	bf00      	nop
 8000e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e9e:	bc08      	pop	{r3}
 8000ea0:	469e      	mov	lr, r3
 8000ea2:	4770      	bx	lr
