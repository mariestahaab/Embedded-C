
keypadInterfacing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f4c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08001110  08001110  00011110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800115c  0800115c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800115c  0800115c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800115c  0800115c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800115c  0800115c  0001115c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001160  08001160  00011160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08001164  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  20000074  080011d8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e0  080011d8  000201e0  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000b03  00000000  00000000  000200e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000321  00000000  00000000  00020be4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000118  00000000  00000000  00020f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000bf  00000000  00000000  00021020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002c89  00000000  00000000  000210df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001512  00000000  00000000  00023d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000097b4  00000000  00000000  0002527a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000009d4  00000000  00000000  0002ea30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  0002f404  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000074 	.word	0x20000074
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080010f8 	.word	0x080010f8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000078 	.word	0x20000078
 8000200:	080010f8 	.word	0x080010f8

08000204 <main>:

volatile uint32_t *portA_InReg = (uint32_t*) 0x40020010;
volatile uint32_t *portB_OutReg = (uint32_t*) 0x40020414;

int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b090      	sub	sp, #64	; 0x40
 8000208:	af00      	add	r7, sp, #0
	//CONFIGURE REGISTERS:

	*ClkCtrlReg		|= (0x1 << 1) | (0x1 << 0);
 800020a:	4b8e      	ldr	r3, [pc, #568]	; (8000444 <main+0x240>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	681a      	ldr	r2, [r3, #0]
 8000210:	4b8c      	ldr	r3, [pc, #560]	; (8000444 <main+0x240>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	f042 0203 	orr.w	r2, r2, #3
 8000218:	601a      	str	r2, [r3, #0]

	*portA_ModeReg &= ~(0x3 << 16) & ~(0x3 << 14) & ~(0x3 << 12) & ~(0x3 << 10);	// CLEAR
 800021a:	4b8b      	ldr	r3, [pc, #556]	; (8000448 <main+0x244>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	681a      	ldr	r2, [r3, #0]
 8000220:	4b89      	ldr	r3, [pc, #548]	; (8000448 <main+0x244>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	f422 327f 	bic.w	r2, r2, #261120	; 0x3fc00
 8000228:	601a      	str	r2, [r3, #0]

	*portA_PuPdReg &= ~(0x3 << 16) & ~(0x3 << 14) & ~(0x3 << 12) & ~(0x3 << 10);	// CLEAR
 800022a:	4b88      	ldr	r3, [pc, #544]	; (800044c <main+0x248>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	681a      	ldr	r2, [r3, #0]
 8000230:	4b86      	ldr	r3, [pc, #536]	; (800044c <main+0x248>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	f422 327f 	bic.w	r2, r2, #261120	; 0x3fc00
 8000238:	601a      	str	r2, [r3, #0]
	*portA_PuPdReg |= (0x1 << 16) | (0x1 << 14) | (0x1 << 12) | (0x1 << 10);		// SET
 800023a:	4b84      	ldr	r3, [pc, #528]	; (800044c <main+0x248>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	681a      	ldr	r2, [r3, #0]
 8000240:	4b82      	ldr	r3, [pc, #520]	; (800044c <main+0x248>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	f442 32aa 	orr.w	r2, r2, #87040	; 0x15400
 8000248:	601a      	str	r2, [r3, #0]

	*portB_ModeReg &= ~(0x3 << 18) & ~(0x3 << 16) & ~(0x3 << 12) & ~(0x3 << 10);		// CLEAR
 800024a:	4b81      	ldr	r3, [pc, #516]	; (8000450 <main+0x24c>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	4a7f      	ldr	r2, [pc, #508]	; (8000450 <main+0x24c>)
 8000252:	6812      	ldr	r2, [r2, #0]
 8000254:	f423 2373 	bic.w	r3, r3, #995328	; 0xf3000
 8000258:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800025c:	6013      	str	r3, [r2, #0]
	*portB_ModeReg |= (0x1 << 18) | (0x1 << 16) | (0x1 << 12) | (0x1 << 10);			// SET
 800025e:	4b7c      	ldr	r3, [pc, #496]	; (8000450 <main+0x24c>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	4a7a      	ldr	r2, [pc, #488]	; (8000450 <main+0x24c>)
 8000266:	6812      	ldr	r2, [r2, #0]
 8000268:	f443 23a2 	orr.w	r3, r3, #331776	; 0x51000
 800026c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000270:	6013      	str	r3, [r2, #0]

	printf("Hello World\n");
 8000272:	4878      	ldr	r0, [pc, #480]	; (8000454 <main+0x250>)
 8000274:	f000 fbb0 	bl	80009d8 <puts>

	while(1){

		*portB_OutReg |= (0x3 << 8 | 0x3 << 5);		// Make all ROWS HIGH.
 8000278:	4b77      	ldr	r3, [pc, #476]	; (8000458 <main+0x254>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	681a      	ldr	r2, [r3, #0]
 800027e:	4b76      	ldr	r3, [pc, #472]	; (8000458 <main+0x254>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	f442 7258 	orr.w	r2, r2, #864	; 0x360
 8000286:	601a      	str	r2, [r3, #0]
		*portB_OutReg &= ~(0x1 << 8);		// Make R1 LOW.
 8000288:	4b73      	ldr	r3, [pc, #460]	; (8000458 <main+0x254>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	681a      	ldr	r2, [r3, #0]
 800028e:	4b72      	ldr	r3, [pc, #456]	; (8000458 <main+0x254>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000296:	601a      	str	r2, [r3, #0]

		if( !((*portA_InReg >> 5) & 0x1) ){
 8000298:	4b70      	ldr	r3, [pc, #448]	; (800045c <main+0x258>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	f003 0320 	and.w	r3, r3, #32
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d10b      	bne.n	80002be <main+0xba>
			for(uint32_t i = 300000; i > 0; i--);
 80002a6:	4b6e      	ldr	r3, [pc, #440]	; (8000460 <main+0x25c>)
 80002a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80002aa:	e002      	b.n	80002b2 <main+0xae>
 80002ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80002ae:	3b01      	subs	r3, #1
 80002b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80002b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d1f9      	bne.n	80002ac <main+0xa8>
			printf("1\n");
 80002b8:	486a      	ldr	r0, [pc, #424]	; (8000464 <main+0x260>)
 80002ba:	f000 fb8d 	bl	80009d8 <puts>
		}
		if( !((*portA_InReg >> 6) & 0x1) ){
 80002be:	4b67      	ldr	r3, [pc, #412]	; (800045c <main+0x258>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d10b      	bne.n	80002e4 <main+0xe0>
			for(uint32_t i = 300000; i > 0; i--);
 80002cc:	4b64      	ldr	r3, [pc, #400]	; (8000460 <main+0x25c>)
 80002ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80002d0:	e002      	b.n	80002d8 <main+0xd4>
 80002d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80002d4:	3b01      	subs	r3, #1
 80002d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80002d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d1f9      	bne.n	80002d2 <main+0xce>
			printf("2\n");
 80002de:	4862      	ldr	r0, [pc, #392]	; (8000468 <main+0x264>)
 80002e0:	f000 fb7a 	bl	80009d8 <puts>
		}
		if( !((*portA_InReg >> 7) & 0x1) ){
 80002e4:	4b5d      	ldr	r3, [pc, #372]	; (800045c <main+0x258>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d10b      	bne.n	800030a <main+0x106>
			for(uint32_t i = 300000; i > 0; i--);
 80002f2:	4b5b      	ldr	r3, [pc, #364]	; (8000460 <main+0x25c>)
 80002f4:	637b      	str	r3, [r7, #52]	; 0x34
 80002f6:	e002      	b.n	80002fe <main+0xfa>
 80002f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80002fa:	3b01      	subs	r3, #1
 80002fc:	637b      	str	r3, [r7, #52]	; 0x34
 80002fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000300:	2b00      	cmp	r3, #0
 8000302:	d1f9      	bne.n	80002f8 <main+0xf4>
			printf("3\n");
 8000304:	4859      	ldr	r0, [pc, #356]	; (800046c <main+0x268>)
 8000306:	f000 fb67 	bl	80009d8 <puts>
		}
		if( !((*portA_InReg >> 8) & 0x1) ){
 800030a:	4b54      	ldr	r3, [pc, #336]	; (800045c <main+0x258>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000314:	2b00      	cmp	r3, #0
 8000316:	d10b      	bne.n	8000330 <main+0x12c>
			for(uint32_t i = 300000; i > 0; i--);
 8000318:	4b51      	ldr	r3, [pc, #324]	; (8000460 <main+0x25c>)
 800031a:	633b      	str	r3, [r7, #48]	; 0x30
 800031c:	e002      	b.n	8000324 <main+0x120>
 800031e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000320:	3b01      	subs	r3, #1
 8000322:	633b      	str	r3, [r7, #48]	; 0x30
 8000324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000326:	2b00      	cmp	r3, #0
 8000328:	d1f9      	bne.n	800031e <main+0x11a>
			printf("A\n");
 800032a:	4851      	ldr	r0, [pc, #324]	; (8000470 <main+0x26c>)
 800032c:	f000 fb54 	bl	80009d8 <puts>
		}

		*portB_OutReg |= (0x3 << 8 | 0x3 << 5);		// Make all ROWS HIGH.
 8000330:	4b49      	ldr	r3, [pc, #292]	; (8000458 <main+0x254>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	681a      	ldr	r2, [r3, #0]
 8000336:	4b48      	ldr	r3, [pc, #288]	; (8000458 <main+0x254>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	f442 7258 	orr.w	r2, r2, #864	; 0x360
 800033e:	601a      	str	r2, [r3, #0]
		*portB_OutReg &= ~(0x1 << 9);		// Make R2 LOW.
 8000340:	4b45      	ldr	r3, [pc, #276]	; (8000458 <main+0x254>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	681a      	ldr	r2, [r3, #0]
 8000346:	4b44      	ldr	r3, [pc, #272]	; (8000458 <main+0x254>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800034e:	601a      	str	r2, [r3, #0]

		if( !(*portA_InReg & (0x1 << 5)) ){
 8000350:	4b42      	ldr	r3, [pc, #264]	; (800045c <main+0x258>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	f003 0320 	and.w	r3, r3, #32
 800035a:	2b00      	cmp	r3, #0
 800035c:	d10b      	bne.n	8000376 <main+0x172>
			for(uint32_t i = 300000; i > 0; i--);
 800035e:	4b40      	ldr	r3, [pc, #256]	; (8000460 <main+0x25c>)
 8000360:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000362:	e002      	b.n	800036a <main+0x166>
 8000364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000366:	3b01      	subs	r3, #1
 8000368:	62fb      	str	r3, [r7, #44]	; 0x2c
 800036a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800036c:	2b00      	cmp	r3, #0
 800036e:	d1f9      	bne.n	8000364 <main+0x160>
			printf("4\n");
 8000370:	4840      	ldr	r0, [pc, #256]	; (8000474 <main+0x270>)
 8000372:	f000 fb31 	bl	80009d8 <puts>
		}
		if( !(*portA_InReg & (0x1 << 6)) ){
 8000376:	4b39      	ldr	r3, [pc, #228]	; (800045c <main+0x258>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000380:	2b00      	cmp	r3, #0
 8000382:	d10b      	bne.n	800039c <main+0x198>
			for(uint32_t i = 300000; i > 0; i--);
 8000384:	4b36      	ldr	r3, [pc, #216]	; (8000460 <main+0x25c>)
 8000386:	62bb      	str	r3, [r7, #40]	; 0x28
 8000388:	e002      	b.n	8000390 <main+0x18c>
 800038a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800038c:	3b01      	subs	r3, #1
 800038e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000392:	2b00      	cmp	r3, #0
 8000394:	d1f9      	bne.n	800038a <main+0x186>
			printf("5\n");
 8000396:	4838      	ldr	r0, [pc, #224]	; (8000478 <main+0x274>)
 8000398:	f000 fb1e 	bl	80009d8 <puts>
		}
		if( !(*portA_InReg & (0x1 << 7)) ){
 800039c:	4b2f      	ldr	r3, [pc, #188]	; (800045c <main+0x258>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d10b      	bne.n	80003c2 <main+0x1be>
			for(uint32_t i = 300000; i > 0; i--);
 80003aa:	4b2d      	ldr	r3, [pc, #180]	; (8000460 <main+0x25c>)
 80003ac:	627b      	str	r3, [r7, #36]	; 0x24
 80003ae:	e002      	b.n	80003b6 <main+0x1b2>
 80003b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003b2:	3b01      	subs	r3, #1
 80003b4:	627b      	str	r3, [r7, #36]	; 0x24
 80003b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d1f9      	bne.n	80003b0 <main+0x1ac>
			printf("6\n");
 80003bc:	482f      	ldr	r0, [pc, #188]	; (800047c <main+0x278>)
 80003be:	f000 fb0b 	bl	80009d8 <puts>
		}
		if( !(*portA_InReg & (0x1 << 8)) ){
 80003c2:	4b26      	ldr	r3, [pc, #152]	; (800045c <main+0x258>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d10b      	bne.n	80003e8 <main+0x1e4>
			for(uint32_t i = 300000; i > 0; i--);
 80003d0:	4b23      	ldr	r3, [pc, #140]	; (8000460 <main+0x25c>)
 80003d2:	623b      	str	r3, [r7, #32]
 80003d4:	e002      	b.n	80003dc <main+0x1d8>
 80003d6:	6a3b      	ldr	r3, [r7, #32]
 80003d8:	3b01      	subs	r3, #1
 80003da:	623b      	str	r3, [r7, #32]
 80003dc:	6a3b      	ldr	r3, [r7, #32]
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d1f9      	bne.n	80003d6 <main+0x1d2>
			printf("B\n");
 80003e2:	4827      	ldr	r0, [pc, #156]	; (8000480 <main+0x27c>)
 80003e4:	f000 faf8 	bl	80009d8 <puts>
		}

		*portB_OutReg |= (0x3 << 8 | 0x3 << 5);		// Make all ROWS HIGH.
 80003e8:	4b1b      	ldr	r3, [pc, #108]	; (8000458 <main+0x254>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	681a      	ldr	r2, [r3, #0]
 80003ee:	4b1a      	ldr	r3, [pc, #104]	; (8000458 <main+0x254>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	f442 7258 	orr.w	r2, r2, #864	; 0x360
 80003f6:	601a      	str	r2, [r3, #0]
		*portB_OutReg &= ~(0x1 << 5);		// Make R3 LOW.
 80003f8:	4b17      	ldr	r3, [pc, #92]	; (8000458 <main+0x254>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	681a      	ldr	r2, [r3, #0]
 80003fe:	4b16      	ldr	r3, [pc, #88]	; (8000458 <main+0x254>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	f022 0220 	bic.w	r2, r2, #32
 8000406:	601a      	str	r2, [r3, #0]

		if( !(*portA_InReg & (0x1 << 5)) ){
 8000408:	4b14      	ldr	r3, [pc, #80]	; (800045c <main+0x258>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	f003 0320 	and.w	r3, r3, #32
 8000412:	2b00      	cmp	r3, #0
 8000414:	d10b      	bne.n	800042e <main+0x22a>
			for(uint32_t i = 300000; i > 0; i--);
 8000416:	4b12      	ldr	r3, [pc, #72]	; (8000460 <main+0x25c>)
 8000418:	61fb      	str	r3, [r7, #28]
 800041a:	e002      	b.n	8000422 <main+0x21e>
 800041c:	69fb      	ldr	r3, [r7, #28]
 800041e:	3b01      	subs	r3, #1
 8000420:	61fb      	str	r3, [r7, #28]
 8000422:	69fb      	ldr	r3, [r7, #28]
 8000424:	2b00      	cmp	r3, #0
 8000426:	d1f9      	bne.n	800041c <main+0x218>
			printf("7\n");
 8000428:	4816      	ldr	r0, [pc, #88]	; (8000484 <main+0x280>)
 800042a:	f000 fad5 	bl	80009d8 <puts>
		}
		if( !(*portA_InReg & (0x1 << 6)) ){
 800042e:	4b0b      	ldr	r3, [pc, #44]	; (800045c <main+0x258>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000438:	2b00      	cmp	r3, #0
 800043a:	d12e      	bne.n	800049a <main+0x296>
			for(uint32_t i = 300000; i > 0; i--);
 800043c:	4b08      	ldr	r3, [pc, #32]	; (8000460 <main+0x25c>)
 800043e:	61bb      	str	r3, [r7, #24]
 8000440:	e025      	b.n	800048e <main+0x28a>
 8000442:	bf00      	nop
 8000444:	20000000 	.word	0x20000000
 8000448:	20000004 	.word	0x20000004
 800044c:	2000000c 	.word	0x2000000c
 8000450:	20000008 	.word	0x20000008
 8000454:	08001110 	.word	0x08001110
 8000458:	20000014 	.word	0x20000014
 800045c:	20000010 	.word	0x20000010
 8000460:	000493e0 	.word	0x000493e0
 8000464:	0800111c 	.word	0x0800111c
 8000468:	08001120 	.word	0x08001120
 800046c:	08001124 	.word	0x08001124
 8000470:	08001128 	.word	0x08001128
 8000474:	0800112c 	.word	0x0800112c
 8000478:	08001130 	.word	0x08001130
 800047c:	08001134 	.word	0x08001134
 8000480:	08001138 	.word	0x08001138
 8000484:	0800113c 	.word	0x0800113c
 8000488:	69bb      	ldr	r3, [r7, #24]
 800048a:	3b01      	subs	r3, #1
 800048c:	61bb      	str	r3, [r7, #24]
 800048e:	69bb      	ldr	r3, [r7, #24]
 8000490:	2b00      	cmp	r3, #0
 8000492:	d1f9      	bne.n	8000488 <main+0x284>
			printf("8\n");
 8000494:	4843      	ldr	r0, [pc, #268]	; (80005a4 <main+0x3a0>)
 8000496:	f000 fa9f 	bl	80009d8 <puts>
		}
		if( !(*portA_InReg & (0x1 << 7)) ){
 800049a:	4b43      	ldr	r3, [pc, #268]	; (80005a8 <main+0x3a4>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d10b      	bne.n	80004c0 <main+0x2bc>
			for(uint32_t i = 300000; i > 0; i--);
 80004a8:	4b40      	ldr	r3, [pc, #256]	; (80005ac <main+0x3a8>)
 80004aa:	617b      	str	r3, [r7, #20]
 80004ac:	e002      	b.n	80004b4 <main+0x2b0>
 80004ae:	697b      	ldr	r3, [r7, #20]
 80004b0:	3b01      	subs	r3, #1
 80004b2:	617b      	str	r3, [r7, #20]
 80004b4:	697b      	ldr	r3, [r7, #20]
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d1f9      	bne.n	80004ae <main+0x2aa>
			printf("9\n");
 80004ba:	483d      	ldr	r0, [pc, #244]	; (80005b0 <main+0x3ac>)
 80004bc:	f000 fa8c 	bl	80009d8 <puts>
		}
		if( !(*portA_InReg & (0x1 << 8)) ){
 80004c0:	4b39      	ldr	r3, [pc, #228]	; (80005a8 <main+0x3a4>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d10b      	bne.n	80004e6 <main+0x2e2>
			for(uint32_t i = 300000; i > 0; i--);
 80004ce:	4b37      	ldr	r3, [pc, #220]	; (80005ac <main+0x3a8>)
 80004d0:	613b      	str	r3, [r7, #16]
 80004d2:	e002      	b.n	80004da <main+0x2d6>
 80004d4:	693b      	ldr	r3, [r7, #16]
 80004d6:	3b01      	subs	r3, #1
 80004d8:	613b      	str	r3, [r7, #16]
 80004da:	693b      	ldr	r3, [r7, #16]
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d1f9      	bne.n	80004d4 <main+0x2d0>
			printf("C\n");
 80004e0:	4834      	ldr	r0, [pc, #208]	; (80005b4 <main+0x3b0>)
 80004e2:	f000 fa79 	bl	80009d8 <puts>
		}

		*portB_OutReg |= (0x3 << 8 | 0x3 << 5); 	// Make all ROWS HIGH.
 80004e6:	4b34      	ldr	r3, [pc, #208]	; (80005b8 <main+0x3b4>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	681a      	ldr	r2, [r3, #0]
 80004ec:	4b32      	ldr	r3, [pc, #200]	; (80005b8 <main+0x3b4>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	f442 7258 	orr.w	r2, r2, #864	; 0x360
 80004f4:	601a      	str	r2, [r3, #0]
		*portB_OutReg &= ~(0x1 << 6);		// Make R4 LOW.
 80004f6:	4b30      	ldr	r3, [pc, #192]	; (80005b8 <main+0x3b4>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	681a      	ldr	r2, [r3, #0]
 80004fc:	4b2e      	ldr	r3, [pc, #184]	; (80005b8 <main+0x3b4>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000504:	601a      	str	r2, [r3, #0]

		if( !(*portA_InReg & (0x1 << 5)) ){
 8000506:	4b28      	ldr	r3, [pc, #160]	; (80005a8 <main+0x3a4>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	f003 0320 	and.w	r3, r3, #32
 8000510:	2b00      	cmp	r3, #0
 8000512:	d10b      	bne.n	800052c <main+0x328>
			for(uint32_t i = 300000; i > 0; i--);
 8000514:	4b25      	ldr	r3, [pc, #148]	; (80005ac <main+0x3a8>)
 8000516:	60fb      	str	r3, [r7, #12]
 8000518:	e002      	b.n	8000520 <main+0x31c>
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	3b01      	subs	r3, #1
 800051e:	60fb      	str	r3, [r7, #12]
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d1f9      	bne.n	800051a <main+0x316>
			printf("*\n");
 8000526:	4825      	ldr	r0, [pc, #148]	; (80005bc <main+0x3b8>)
 8000528:	f000 fa56 	bl	80009d8 <puts>
		}
		if( !(*portA_InReg & (0x1 << 6)) ){
 800052c:	4b1e      	ldr	r3, [pc, #120]	; (80005a8 <main+0x3a4>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000536:	2b00      	cmp	r3, #0
 8000538:	d10b      	bne.n	8000552 <main+0x34e>
			for(uint32_t i = 300000; i > 0; i--);
 800053a:	4b1c      	ldr	r3, [pc, #112]	; (80005ac <main+0x3a8>)
 800053c:	60bb      	str	r3, [r7, #8]
 800053e:	e002      	b.n	8000546 <main+0x342>
 8000540:	68bb      	ldr	r3, [r7, #8]
 8000542:	3b01      	subs	r3, #1
 8000544:	60bb      	str	r3, [r7, #8]
 8000546:	68bb      	ldr	r3, [r7, #8]
 8000548:	2b00      	cmp	r3, #0
 800054a:	d1f9      	bne.n	8000540 <main+0x33c>
			printf("0\n");
 800054c:	481c      	ldr	r0, [pc, #112]	; (80005c0 <main+0x3bc>)
 800054e:	f000 fa43 	bl	80009d8 <puts>
		}
		if( !(*portA_InReg & (0x1 << 7)) ){
 8000552:	4b15      	ldr	r3, [pc, #84]	; (80005a8 <main+0x3a4>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800055c:	2b00      	cmp	r3, #0
 800055e:	d10b      	bne.n	8000578 <main+0x374>
			for(uint32_t i = 300000; i > 0; i--);
 8000560:	4b12      	ldr	r3, [pc, #72]	; (80005ac <main+0x3a8>)
 8000562:	607b      	str	r3, [r7, #4]
 8000564:	e002      	b.n	800056c <main+0x368>
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	3b01      	subs	r3, #1
 800056a:	607b      	str	r3, [r7, #4]
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d1f9      	bne.n	8000566 <main+0x362>
			printf("#\n");
 8000572:	4814      	ldr	r0, [pc, #80]	; (80005c4 <main+0x3c0>)
 8000574:	f000 fa30 	bl	80009d8 <puts>
		}
		if( !(*portA_InReg & (0x1 << 8)) ){
 8000578:	4b0b      	ldr	r3, [pc, #44]	; (80005a8 <main+0x3a4>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000582:	2b00      	cmp	r3, #0
 8000584:	f47f ae78 	bne.w	8000278 <main+0x74>
			for(uint32_t i = 300000; i > 0; i--);
 8000588:	4b08      	ldr	r3, [pc, #32]	; (80005ac <main+0x3a8>)
 800058a:	603b      	str	r3, [r7, #0]
 800058c:	e002      	b.n	8000594 <main+0x390>
 800058e:	683b      	ldr	r3, [r7, #0]
 8000590:	3b01      	subs	r3, #1
 8000592:	603b      	str	r3, [r7, #0]
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d1f9      	bne.n	800058e <main+0x38a>
			printf("D\n");
 800059a:	480b      	ldr	r0, [pc, #44]	; (80005c8 <main+0x3c4>)
 800059c:	f000 fa1c 	bl	80009d8 <puts>
		*portB_OutReg |= (0x3 << 8 | 0x3 << 5);		// Make all ROWS HIGH.
 80005a0:	e66a      	b.n	8000278 <main+0x74>
 80005a2:	bf00      	nop
 80005a4:	08001140 	.word	0x08001140
 80005a8:	20000010 	.word	0x20000010
 80005ac:	000493e0 	.word	0x000493e0
 80005b0:	08001144 	.word	0x08001144
 80005b4:	08001148 	.word	0x08001148
 80005b8:	20000014 	.word	0x20000014
 80005bc:	0800114c 	.word	0x0800114c
 80005c0:	08001150 	.word	0x08001150
 80005c4:	08001154 	.word	0x08001154
 80005c8:	08001158 	.word	0x08001158

080005cc <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80005d6:	4b0e      	ldr	r3, [pc, #56]	; (8000610 <ITM_SendChar+0x44>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4a0d      	ldr	r2, [pc, #52]	; (8000610 <ITM_SendChar+0x44>)
 80005dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80005e0:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80005e2:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <ITM_SendChar+0x48>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4a0b      	ldr	r2, [pc, #44]	; (8000614 <ITM_SendChar+0x48>)
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80005ee:	bf00      	nop
 80005f0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	f003 0301 	and.w	r3, r3, #1
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d0f8      	beq.n	80005f0 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80005fe:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	6013      	str	r3, [r2, #0]
}
 8000606:	bf00      	nop
 8000608:	370c      	adds	r7, #12
 800060a:	46bd      	mov	sp, r7
 800060c:	bc80      	pop	{r7}
 800060e:	4770      	bx	lr
 8000610:	e000edfc 	.word	0xe000edfc
 8000614:	e0000e00 	.word	0xe0000e00

08000618 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b086      	sub	sp, #24
 800061c:	af00      	add	r7, sp, #0
 800061e:	60f8      	str	r0, [r7, #12]
 8000620:	60b9      	str	r1, [r7, #8]
 8000622:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000624:	2300      	movs	r3, #0
 8000626:	617b      	str	r3, [r7, #20]
 8000628:	e00a      	b.n	8000640 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800062a:	f3af 8000 	nop.w
 800062e:	4601      	mov	r1, r0
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	1c5a      	adds	r2, r3, #1
 8000634:	60ba      	str	r2, [r7, #8]
 8000636:	b2ca      	uxtb	r2, r1
 8000638:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800063a:	697b      	ldr	r3, [r7, #20]
 800063c:	3301      	adds	r3, #1
 800063e:	617b      	str	r3, [r7, #20]
 8000640:	697a      	ldr	r2, [r7, #20]
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	429a      	cmp	r2, r3
 8000646:	dbf0      	blt.n	800062a <_read+0x12>
  }

  return len;
 8000648:	687b      	ldr	r3, [r7, #4]
}
 800064a:	4618      	mov	r0, r3
 800064c:	3718      	adds	r7, #24
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}

08000652 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000652:	b580      	push	{r7, lr}
 8000654:	b086      	sub	sp, #24
 8000656:	af00      	add	r7, sp, #0
 8000658:	60f8      	str	r0, [r7, #12]
 800065a:	60b9      	str	r1, [r7, #8]
 800065c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800065e:	2300      	movs	r3, #0
 8000660:	617b      	str	r3, [r7, #20]
 8000662:	e009      	b.n	8000678 <_write+0x26>
  {
    //__io_putchar(*ptr++);

	  ITM_SendChar(*ptr++);
 8000664:	68bb      	ldr	r3, [r7, #8]
 8000666:	1c5a      	adds	r2, r3, #1
 8000668:	60ba      	str	r2, [r7, #8]
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	4618      	mov	r0, r3
 800066e:	f7ff ffad 	bl	80005cc <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000672:	697b      	ldr	r3, [r7, #20]
 8000674:	3301      	adds	r3, #1
 8000676:	617b      	str	r3, [r7, #20]
 8000678:	697a      	ldr	r2, [r7, #20]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	429a      	cmp	r2, r3
 800067e:	dbf1      	blt.n	8000664 <_write+0x12>
  }
  return len;
 8000680:	687b      	ldr	r3, [r7, #4]
}
 8000682:	4618      	mov	r0, r3
 8000684:	3718      	adds	r7, #24
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}

0800068a <_close>:

int _close(int file)
{
 800068a:	b480      	push	{r7}
 800068c:	b083      	sub	sp, #12
 800068e:	af00      	add	r7, sp, #0
 8000690:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000692:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000696:	4618      	mov	r0, r3
 8000698:	370c      	adds	r7, #12
 800069a:	46bd      	mov	sp, r7
 800069c:	bc80      	pop	{r7}
 800069e:	4770      	bx	lr

080006a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006b0:	605a      	str	r2, [r3, #4]
  return 0;
 80006b2:	2300      	movs	r3, #0
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	370c      	adds	r7, #12
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bc80      	pop	{r7}
 80006bc:	4770      	bx	lr

080006be <_isatty>:

int _isatty(int file)
{
 80006be:	b480      	push	{r7}
 80006c0:	b083      	sub	sp, #12
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80006c6:	2301      	movs	r3, #1
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	370c      	adds	r7, #12
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bc80      	pop	{r7}
 80006d0:	4770      	bx	lr

080006d2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80006d2:	b480      	push	{r7}
 80006d4:	b085      	sub	sp, #20
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	60f8      	str	r0, [r7, #12]
 80006da:	60b9      	str	r1, [r7, #8]
 80006dc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80006de:	2300      	movs	r3, #0
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	3714      	adds	r7, #20
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bc80      	pop	{r7}
 80006e8:	4770      	bx	lr
	...

080006ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b086      	sub	sp, #24
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006f4:	4a14      	ldr	r2, [pc, #80]	; (8000748 <_sbrk+0x5c>)
 80006f6:	4b15      	ldr	r3, [pc, #84]	; (800074c <_sbrk+0x60>)
 80006f8:	1ad3      	subs	r3, r2, r3
 80006fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006fc:	697b      	ldr	r3, [r7, #20]
 80006fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000700:	4b13      	ldr	r3, [pc, #76]	; (8000750 <_sbrk+0x64>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d102      	bne.n	800070e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000708:	4b11      	ldr	r3, [pc, #68]	; (8000750 <_sbrk+0x64>)
 800070a:	4a12      	ldr	r2, [pc, #72]	; (8000754 <_sbrk+0x68>)
 800070c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800070e:	4b10      	ldr	r3, [pc, #64]	; (8000750 <_sbrk+0x64>)
 8000710:	681a      	ldr	r2, [r3, #0]
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	4413      	add	r3, r2
 8000716:	693a      	ldr	r2, [r7, #16]
 8000718:	429a      	cmp	r2, r3
 800071a:	d207      	bcs.n	800072c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800071c:	f000 f96c 	bl	80009f8 <__errno>
 8000720:	4603      	mov	r3, r0
 8000722:	220c      	movs	r2, #12
 8000724:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000726:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800072a:	e009      	b.n	8000740 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800072c:	4b08      	ldr	r3, [pc, #32]	; (8000750 <_sbrk+0x64>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000732:	4b07      	ldr	r3, [pc, #28]	; (8000750 <_sbrk+0x64>)
 8000734:	681a      	ldr	r2, [r3, #0]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	4413      	add	r3, r2
 800073a:	4a05      	ldr	r2, [pc, #20]	; (8000750 <_sbrk+0x64>)
 800073c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800073e:	68fb      	ldr	r3, [r7, #12]
}
 8000740:	4618      	mov	r0, r3
 8000742:	3718      	adds	r7, #24
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	20020000 	.word	0x20020000
 800074c:	00000400 	.word	0x00000400
 8000750:	20000090 	.word	0x20000090
 8000754:	200001e0 	.word	0x200001e0

08000758 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000758:	480d      	ldr	r0, [pc, #52]	; (8000790 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800075a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800075c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000760:	480c      	ldr	r0, [pc, #48]	; (8000794 <LoopForever+0x6>)
  ldr r1, =_edata
 8000762:	490d      	ldr	r1, [pc, #52]	; (8000798 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000764:	4a0d      	ldr	r2, [pc, #52]	; (800079c <LoopForever+0xe>)
  movs r3, #0
 8000766:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000768:	e002      	b.n	8000770 <LoopCopyDataInit>

0800076a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800076a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800076c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800076e:	3304      	adds	r3, #4

08000770 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000770:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000772:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000774:	d3f9      	bcc.n	800076a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000776:	4a0a      	ldr	r2, [pc, #40]	; (80007a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000778:	4c0a      	ldr	r4, [pc, #40]	; (80007a4 <LoopForever+0x16>)
  movs r3, #0
 800077a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800077c:	e001      	b.n	8000782 <LoopFillZerobss>

0800077e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800077e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000780:	3204      	adds	r2, #4

08000782 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000782:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000784:	d3fb      	bcc.n	800077e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000786:	f000 f93d 	bl	8000a04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800078a:	f7ff fd3b 	bl	8000204 <main>

0800078e <LoopForever>:

LoopForever:
  b LoopForever
 800078e:	e7fe      	b.n	800078e <LoopForever>
  ldr   r0, =_estack
 8000790:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000794:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000798:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800079c:	08001164 	.word	0x08001164
  ldr r2, =_sbss
 80007a0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80007a4:	200001e0 	.word	0x200001e0

080007a8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007a8:	e7fe      	b.n	80007a8 <ADC_IRQHandler>
	...

080007ac <std>:
 80007ac:	2300      	movs	r3, #0
 80007ae:	b510      	push	{r4, lr}
 80007b0:	4604      	mov	r4, r0
 80007b2:	e9c0 3300 	strd	r3, r3, [r0]
 80007b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80007ba:	6083      	str	r3, [r0, #8]
 80007bc:	8181      	strh	r1, [r0, #12]
 80007be:	6643      	str	r3, [r0, #100]	; 0x64
 80007c0:	81c2      	strh	r2, [r0, #14]
 80007c2:	6183      	str	r3, [r0, #24]
 80007c4:	4619      	mov	r1, r3
 80007c6:	2208      	movs	r2, #8
 80007c8:	305c      	adds	r0, #92	; 0x5c
 80007ca:	f000 f90d 	bl	80009e8 <memset>
 80007ce:	4b0d      	ldr	r3, [pc, #52]	; (8000804 <std+0x58>)
 80007d0:	6263      	str	r3, [r4, #36]	; 0x24
 80007d2:	4b0d      	ldr	r3, [pc, #52]	; (8000808 <std+0x5c>)
 80007d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80007d6:	4b0d      	ldr	r3, [pc, #52]	; (800080c <std+0x60>)
 80007d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80007da:	4b0d      	ldr	r3, [pc, #52]	; (8000810 <std+0x64>)
 80007dc:	6323      	str	r3, [r4, #48]	; 0x30
 80007de:	4b0d      	ldr	r3, [pc, #52]	; (8000814 <std+0x68>)
 80007e0:	6224      	str	r4, [r4, #32]
 80007e2:	429c      	cmp	r4, r3
 80007e4:	d006      	beq.n	80007f4 <std+0x48>
 80007e6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80007ea:	4294      	cmp	r4, r2
 80007ec:	d002      	beq.n	80007f4 <std+0x48>
 80007ee:	33d0      	adds	r3, #208	; 0xd0
 80007f0:	429c      	cmp	r4, r3
 80007f2:	d105      	bne.n	8000800 <std+0x54>
 80007f4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80007f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007fc:	f000 b926 	b.w	8000a4c <__retarget_lock_init_recursive>
 8000800:	bd10      	pop	{r4, pc}
 8000802:	bf00      	nop
 8000804:	08000d01 	.word	0x08000d01
 8000808:	08000d23 	.word	0x08000d23
 800080c:	08000d5b 	.word	0x08000d5b
 8000810:	08000d7f 	.word	0x08000d7f
 8000814:	20000094 	.word	0x20000094

08000818 <stdio_exit_handler>:
 8000818:	4a02      	ldr	r2, [pc, #8]	; (8000824 <stdio_exit_handler+0xc>)
 800081a:	4903      	ldr	r1, [pc, #12]	; (8000828 <stdio_exit_handler+0x10>)
 800081c:	4803      	ldr	r0, [pc, #12]	; (800082c <stdio_exit_handler+0x14>)
 800081e:	f000 b869 	b.w	80008f4 <_fwalk_sglue>
 8000822:	bf00      	nop
 8000824:	20000018 	.word	0x20000018
 8000828:	08000c99 	.word	0x08000c99
 800082c:	20000024 	.word	0x20000024

08000830 <cleanup_stdio>:
 8000830:	6841      	ldr	r1, [r0, #4]
 8000832:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <cleanup_stdio+0x34>)
 8000834:	4299      	cmp	r1, r3
 8000836:	b510      	push	{r4, lr}
 8000838:	4604      	mov	r4, r0
 800083a:	d001      	beq.n	8000840 <cleanup_stdio+0x10>
 800083c:	f000 fa2c 	bl	8000c98 <_fflush_r>
 8000840:	68a1      	ldr	r1, [r4, #8]
 8000842:	4b09      	ldr	r3, [pc, #36]	; (8000868 <cleanup_stdio+0x38>)
 8000844:	4299      	cmp	r1, r3
 8000846:	d002      	beq.n	800084e <cleanup_stdio+0x1e>
 8000848:	4620      	mov	r0, r4
 800084a:	f000 fa25 	bl	8000c98 <_fflush_r>
 800084e:	68e1      	ldr	r1, [r4, #12]
 8000850:	4b06      	ldr	r3, [pc, #24]	; (800086c <cleanup_stdio+0x3c>)
 8000852:	4299      	cmp	r1, r3
 8000854:	d004      	beq.n	8000860 <cleanup_stdio+0x30>
 8000856:	4620      	mov	r0, r4
 8000858:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800085c:	f000 ba1c 	b.w	8000c98 <_fflush_r>
 8000860:	bd10      	pop	{r4, pc}
 8000862:	bf00      	nop
 8000864:	20000094 	.word	0x20000094
 8000868:	200000fc 	.word	0x200000fc
 800086c:	20000164 	.word	0x20000164

08000870 <global_stdio_init.part.0>:
 8000870:	b510      	push	{r4, lr}
 8000872:	4b0b      	ldr	r3, [pc, #44]	; (80008a0 <global_stdio_init.part.0+0x30>)
 8000874:	4c0b      	ldr	r4, [pc, #44]	; (80008a4 <global_stdio_init.part.0+0x34>)
 8000876:	4a0c      	ldr	r2, [pc, #48]	; (80008a8 <global_stdio_init.part.0+0x38>)
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	4620      	mov	r0, r4
 800087c:	2200      	movs	r2, #0
 800087e:	2104      	movs	r1, #4
 8000880:	f7ff ff94 	bl	80007ac <std>
 8000884:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8000888:	2201      	movs	r2, #1
 800088a:	2109      	movs	r1, #9
 800088c:	f7ff ff8e 	bl	80007ac <std>
 8000890:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000894:	2202      	movs	r2, #2
 8000896:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800089a:	2112      	movs	r1, #18
 800089c:	f7ff bf86 	b.w	80007ac <std>
 80008a0:	200001cc 	.word	0x200001cc
 80008a4:	20000094 	.word	0x20000094
 80008a8:	08000819 	.word	0x08000819

080008ac <__sfp_lock_acquire>:
 80008ac:	4801      	ldr	r0, [pc, #4]	; (80008b4 <__sfp_lock_acquire+0x8>)
 80008ae:	f000 b8ce 	b.w	8000a4e <__retarget_lock_acquire_recursive>
 80008b2:	bf00      	nop
 80008b4:	200001d1 	.word	0x200001d1

080008b8 <__sfp_lock_release>:
 80008b8:	4801      	ldr	r0, [pc, #4]	; (80008c0 <__sfp_lock_release+0x8>)
 80008ba:	f000 b8c9 	b.w	8000a50 <__retarget_lock_release_recursive>
 80008be:	bf00      	nop
 80008c0:	200001d1 	.word	0x200001d1

080008c4 <__sinit>:
 80008c4:	b510      	push	{r4, lr}
 80008c6:	4604      	mov	r4, r0
 80008c8:	f7ff fff0 	bl	80008ac <__sfp_lock_acquire>
 80008cc:	6a23      	ldr	r3, [r4, #32]
 80008ce:	b11b      	cbz	r3, 80008d8 <__sinit+0x14>
 80008d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80008d4:	f7ff bff0 	b.w	80008b8 <__sfp_lock_release>
 80008d8:	4b04      	ldr	r3, [pc, #16]	; (80008ec <__sinit+0x28>)
 80008da:	6223      	str	r3, [r4, #32]
 80008dc:	4b04      	ldr	r3, [pc, #16]	; (80008f0 <__sinit+0x2c>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d1f5      	bne.n	80008d0 <__sinit+0xc>
 80008e4:	f7ff ffc4 	bl	8000870 <global_stdio_init.part.0>
 80008e8:	e7f2      	b.n	80008d0 <__sinit+0xc>
 80008ea:	bf00      	nop
 80008ec:	08000831 	.word	0x08000831
 80008f0:	200001cc 	.word	0x200001cc

080008f4 <_fwalk_sglue>:
 80008f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80008f8:	4607      	mov	r7, r0
 80008fa:	4688      	mov	r8, r1
 80008fc:	4614      	mov	r4, r2
 80008fe:	2600      	movs	r6, #0
 8000900:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000904:	f1b9 0901 	subs.w	r9, r9, #1
 8000908:	d505      	bpl.n	8000916 <_fwalk_sglue+0x22>
 800090a:	6824      	ldr	r4, [r4, #0]
 800090c:	2c00      	cmp	r4, #0
 800090e:	d1f7      	bne.n	8000900 <_fwalk_sglue+0xc>
 8000910:	4630      	mov	r0, r6
 8000912:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000916:	89ab      	ldrh	r3, [r5, #12]
 8000918:	2b01      	cmp	r3, #1
 800091a:	d907      	bls.n	800092c <_fwalk_sglue+0x38>
 800091c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000920:	3301      	adds	r3, #1
 8000922:	d003      	beq.n	800092c <_fwalk_sglue+0x38>
 8000924:	4629      	mov	r1, r5
 8000926:	4638      	mov	r0, r7
 8000928:	47c0      	blx	r8
 800092a:	4306      	orrs	r6, r0
 800092c:	3568      	adds	r5, #104	; 0x68
 800092e:	e7e9      	b.n	8000904 <_fwalk_sglue+0x10>

08000930 <_puts_r>:
 8000930:	6a03      	ldr	r3, [r0, #32]
 8000932:	b570      	push	{r4, r5, r6, lr}
 8000934:	6884      	ldr	r4, [r0, #8]
 8000936:	4605      	mov	r5, r0
 8000938:	460e      	mov	r6, r1
 800093a:	b90b      	cbnz	r3, 8000940 <_puts_r+0x10>
 800093c:	f7ff ffc2 	bl	80008c4 <__sinit>
 8000940:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000942:	07db      	lsls	r3, r3, #31
 8000944:	d405      	bmi.n	8000952 <_puts_r+0x22>
 8000946:	89a3      	ldrh	r3, [r4, #12]
 8000948:	0598      	lsls	r0, r3, #22
 800094a:	d402      	bmi.n	8000952 <_puts_r+0x22>
 800094c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800094e:	f000 f87e 	bl	8000a4e <__retarget_lock_acquire_recursive>
 8000952:	89a3      	ldrh	r3, [r4, #12]
 8000954:	0719      	lsls	r1, r3, #28
 8000956:	d513      	bpl.n	8000980 <_puts_r+0x50>
 8000958:	6923      	ldr	r3, [r4, #16]
 800095a:	b18b      	cbz	r3, 8000980 <_puts_r+0x50>
 800095c:	3e01      	subs	r6, #1
 800095e:	68a3      	ldr	r3, [r4, #8]
 8000960:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000964:	3b01      	subs	r3, #1
 8000966:	60a3      	str	r3, [r4, #8]
 8000968:	b9e9      	cbnz	r1, 80009a6 <_puts_r+0x76>
 800096a:	2b00      	cmp	r3, #0
 800096c:	da2e      	bge.n	80009cc <_puts_r+0x9c>
 800096e:	4622      	mov	r2, r4
 8000970:	210a      	movs	r1, #10
 8000972:	4628      	mov	r0, r5
 8000974:	f000 fa07 	bl	8000d86 <__swbuf_r>
 8000978:	3001      	adds	r0, #1
 800097a:	d007      	beq.n	800098c <_puts_r+0x5c>
 800097c:	250a      	movs	r5, #10
 800097e:	e007      	b.n	8000990 <_puts_r+0x60>
 8000980:	4621      	mov	r1, r4
 8000982:	4628      	mov	r0, r5
 8000984:	f000 fa3c 	bl	8000e00 <__swsetup_r>
 8000988:	2800      	cmp	r0, #0
 800098a:	d0e7      	beq.n	800095c <_puts_r+0x2c>
 800098c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8000990:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000992:	07da      	lsls	r2, r3, #31
 8000994:	d405      	bmi.n	80009a2 <_puts_r+0x72>
 8000996:	89a3      	ldrh	r3, [r4, #12]
 8000998:	059b      	lsls	r3, r3, #22
 800099a:	d402      	bmi.n	80009a2 <_puts_r+0x72>
 800099c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800099e:	f000 f857 	bl	8000a50 <__retarget_lock_release_recursive>
 80009a2:	4628      	mov	r0, r5
 80009a4:	bd70      	pop	{r4, r5, r6, pc}
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	da04      	bge.n	80009b4 <_puts_r+0x84>
 80009aa:	69a2      	ldr	r2, [r4, #24]
 80009ac:	429a      	cmp	r2, r3
 80009ae:	dc06      	bgt.n	80009be <_puts_r+0x8e>
 80009b0:	290a      	cmp	r1, #10
 80009b2:	d004      	beq.n	80009be <_puts_r+0x8e>
 80009b4:	6823      	ldr	r3, [r4, #0]
 80009b6:	1c5a      	adds	r2, r3, #1
 80009b8:	6022      	str	r2, [r4, #0]
 80009ba:	7019      	strb	r1, [r3, #0]
 80009bc:	e7cf      	b.n	800095e <_puts_r+0x2e>
 80009be:	4622      	mov	r2, r4
 80009c0:	4628      	mov	r0, r5
 80009c2:	f000 f9e0 	bl	8000d86 <__swbuf_r>
 80009c6:	3001      	adds	r0, #1
 80009c8:	d1c9      	bne.n	800095e <_puts_r+0x2e>
 80009ca:	e7df      	b.n	800098c <_puts_r+0x5c>
 80009cc:	6823      	ldr	r3, [r4, #0]
 80009ce:	250a      	movs	r5, #10
 80009d0:	1c5a      	adds	r2, r3, #1
 80009d2:	6022      	str	r2, [r4, #0]
 80009d4:	701d      	strb	r5, [r3, #0]
 80009d6:	e7db      	b.n	8000990 <_puts_r+0x60>

080009d8 <puts>:
 80009d8:	4b02      	ldr	r3, [pc, #8]	; (80009e4 <puts+0xc>)
 80009da:	4601      	mov	r1, r0
 80009dc:	6818      	ldr	r0, [r3, #0]
 80009de:	f7ff bfa7 	b.w	8000930 <_puts_r>
 80009e2:	bf00      	nop
 80009e4:	20000070 	.word	0x20000070

080009e8 <memset>:
 80009e8:	4402      	add	r2, r0
 80009ea:	4603      	mov	r3, r0
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d100      	bne.n	80009f2 <memset+0xa>
 80009f0:	4770      	bx	lr
 80009f2:	f803 1b01 	strb.w	r1, [r3], #1
 80009f6:	e7f9      	b.n	80009ec <memset+0x4>

080009f8 <__errno>:
 80009f8:	4b01      	ldr	r3, [pc, #4]	; (8000a00 <__errno+0x8>)
 80009fa:	6818      	ldr	r0, [r3, #0]
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	20000070 	.word	0x20000070

08000a04 <__libc_init_array>:
 8000a04:	b570      	push	{r4, r5, r6, lr}
 8000a06:	4d0d      	ldr	r5, [pc, #52]	; (8000a3c <__libc_init_array+0x38>)
 8000a08:	4c0d      	ldr	r4, [pc, #52]	; (8000a40 <__libc_init_array+0x3c>)
 8000a0a:	1b64      	subs	r4, r4, r5
 8000a0c:	10a4      	asrs	r4, r4, #2
 8000a0e:	2600      	movs	r6, #0
 8000a10:	42a6      	cmp	r6, r4
 8000a12:	d109      	bne.n	8000a28 <__libc_init_array+0x24>
 8000a14:	4d0b      	ldr	r5, [pc, #44]	; (8000a44 <__libc_init_array+0x40>)
 8000a16:	4c0c      	ldr	r4, [pc, #48]	; (8000a48 <__libc_init_array+0x44>)
 8000a18:	f000 fb6e 	bl	80010f8 <_init>
 8000a1c:	1b64      	subs	r4, r4, r5
 8000a1e:	10a4      	asrs	r4, r4, #2
 8000a20:	2600      	movs	r6, #0
 8000a22:	42a6      	cmp	r6, r4
 8000a24:	d105      	bne.n	8000a32 <__libc_init_array+0x2e>
 8000a26:	bd70      	pop	{r4, r5, r6, pc}
 8000a28:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a2c:	4798      	blx	r3
 8000a2e:	3601      	adds	r6, #1
 8000a30:	e7ee      	b.n	8000a10 <__libc_init_array+0xc>
 8000a32:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a36:	4798      	blx	r3
 8000a38:	3601      	adds	r6, #1
 8000a3a:	e7f2      	b.n	8000a22 <__libc_init_array+0x1e>
 8000a3c:	0800115c 	.word	0x0800115c
 8000a40:	0800115c 	.word	0x0800115c
 8000a44:	0800115c 	.word	0x0800115c
 8000a48:	08001160 	.word	0x08001160

08000a4c <__retarget_lock_init_recursive>:
 8000a4c:	4770      	bx	lr

08000a4e <__retarget_lock_acquire_recursive>:
 8000a4e:	4770      	bx	lr

08000a50 <__retarget_lock_release_recursive>:
 8000a50:	4770      	bx	lr
	...

08000a54 <sbrk_aligned>:
 8000a54:	b570      	push	{r4, r5, r6, lr}
 8000a56:	4e0e      	ldr	r6, [pc, #56]	; (8000a90 <sbrk_aligned+0x3c>)
 8000a58:	460c      	mov	r4, r1
 8000a5a:	6831      	ldr	r1, [r6, #0]
 8000a5c:	4605      	mov	r5, r0
 8000a5e:	b911      	cbnz	r1, 8000a66 <sbrk_aligned+0x12>
 8000a60:	f000 fade 	bl	8001020 <_sbrk_r>
 8000a64:	6030      	str	r0, [r6, #0]
 8000a66:	4621      	mov	r1, r4
 8000a68:	4628      	mov	r0, r5
 8000a6a:	f000 fad9 	bl	8001020 <_sbrk_r>
 8000a6e:	1c43      	adds	r3, r0, #1
 8000a70:	d00a      	beq.n	8000a88 <sbrk_aligned+0x34>
 8000a72:	1cc4      	adds	r4, r0, #3
 8000a74:	f024 0403 	bic.w	r4, r4, #3
 8000a78:	42a0      	cmp	r0, r4
 8000a7a:	d007      	beq.n	8000a8c <sbrk_aligned+0x38>
 8000a7c:	1a21      	subs	r1, r4, r0
 8000a7e:	4628      	mov	r0, r5
 8000a80:	f000 face 	bl	8001020 <_sbrk_r>
 8000a84:	3001      	adds	r0, #1
 8000a86:	d101      	bne.n	8000a8c <sbrk_aligned+0x38>
 8000a88:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000a8c:	4620      	mov	r0, r4
 8000a8e:	bd70      	pop	{r4, r5, r6, pc}
 8000a90:	200001d8 	.word	0x200001d8

08000a94 <_malloc_r>:
 8000a94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000a98:	1ccd      	adds	r5, r1, #3
 8000a9a:	f025 0503 	bic.w	r5, r5, #3
 8000a9e:	3508      	adds	r5, #8
 8000aa0:	2d0c      	cmp	r5, #12
 8000aa2:	bf38      	it	cc
 8000aa4:	250c      	movcc	r5, #12
 8000aa6:	2d00      	cmp	r5, #0
 8000aa8:	4607      	mov	r7, r0
 8000aaa:	db01      	blt.n	8000ab0 <_malloc_r+0x1c>
 8000aac:	42a9      	cmp	r1, r5
 8000aae:	d905      	bls.n	8000abc <_malloc_r+0x28>
 8000ab0:	230c      	movs	r3, #12
 8000ab2:	603b      	str	r3, [r7, #0]
 8000ab4:	2600      	movs	r6, #0
 8000ab6:	4630      	mov	r0, r6
 8000ab8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000abc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000b90 <_malloc_r+0xfc>
 8000ac0:	f000 f912 	bl	8000ce8 <__malloc_lock>
 8000ac4:	f8d8 3000 	ldr.w	r3, [r8]
 8000ac8:	461c      	mov	r4, r3
 8000aca:	bb5c      	cbnz	r4, 8000b24 <_malloc_r+0x90>
 8000acc:	4629      	mov	r1, r5
 8000ace:	4638      	mov	r0, r7
 8000ad0:	f7ff ffc0 	bl	8000a54 <sbrk_aligned>
 8000ad4:	1c43      	adds	r3, r0, #1
 8000ad6:	4604      	mov	r4, r0
 8000ad8:	d155      	bne.n	8000b86 <_malloc_r+0xf2>
 8000ada:	f8d8 4000 	ldr.w	r4, [r8]
 8000ade:	4626      	mov	r6, r4
 8000ae0:	2e00      	cmp	r6, #0
 8000ae2:	d145      	bne.n	8000b70 <_malloc_r+0xdc>
 8000ae4:	2c00      	cmp	r4, #0
 8000ae6:	d048      	beq.n	8000b7a <_malloc_r+0xe6>
 8000ae8:	6823      	ldr	r3, [r4, #0]
 8000aea:	4631      	mov	r1, r6
 8000aec:	4638      	mov	r0, r7
 8000aee:	eb04 0903 	add.w	r9, r4, r3
 8000af2:	f000 fa95 	bl	8001020 <_sbrk_r>
 8000af6:	4581      	cmp	r9, r0
 8000af8:	d13f      	bne.n	8000b7a <_malloc_r+0xe6>
 8000afa:	6821      	ldr	r1, [r4, #0]
 8000afc:	1a6d      	subs	r5, r5, r1
 8000afe:	4629      	mov	r1, r5
 8000b00:	4638      	mov	r0, r7
 8000b02:	f7ff ffa7 	bl	8000a54 <sbrk_aligned>
 8000b06:	3001      	adds	r0, #1
 8000b08:	d037      	beq.n	8000b7a <_malloc_r+0xe6>
 8000b0a:	6823      	ldr	r3, [r4, #0]
 8000b0c:	442b      	add	r3, r5
 8000b0e:	6023      	str	r3, [r4, #0]
 8000b10:	f8d8 3000 	ldr.w	r3, [r8]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d038      	beq.n	8000b8a <_malloc_r+0xf6>
 8000b18:	685a      	ldr	r2, [r3, #4]
 8000b1a:	42a2      	cmp	r2, r4
 8000b1c:	d12b      	bne.n	8000b76 <_malloc_r+0xe2>
 8000b1e:	2200      	movs	r2, #0
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	e00f      	b.n	8000b44 <_malloc_r+0xb0>
 8000b24:	6822      	ldr	r2, [r4, #0]
 8000b26:	1b52      	subs	r2, r2, r5
 8000b28:	d41f      	bmi.n	8000b6a <_malloc_r+0xd6>
 8000b2a:	2a0b      	cmp	r2, #11
 8000b2c:	d917      	bls.n	8000b5e <_malloc_r+0xca>
 8000b2e:	1961      	adds	r1, r4, r5
 8000b30:	42a3      	cmp	r3, r4
 8000b32:	6025      	str	r5, [r4, #0]
 8000b34:	bf18      	it	ne
 8000b36:	6059      	strne	r1, [r3, #4]
 8000b38:	6863      	ldr	r3, [r4, #4]
 8000b3a:	bf08      	it	eq
 8000b3c:	f8c8 1000 	streq.w	r1, [r8]
 8000b40:	5162      	str	r2, [r4, r5]
 8000b42:	604b      	str	r3, [r1, #4]
 8000b44:	4638      	mov	r0, r7
 8000b46:	f104 060b 	add.w	r6, r4, #11
 8000b4a:	f000 f8d3 	bl	8000cf4 <__malloc_unlock>
 8000b4e:	f026 0607 	bic.w	r6, r6, #7
 8000b52:	1d23      	adds	r3, r4, #4
 8000b54:	1af2      	subs	r2, r6, r3
 8000b56:	d0ae      	beq.n	8000ab6 <_malloc_r+0x22>
 8000b58:	1b9b      	subs	r3, r3, r6
 8000b5a:	50a3      	str	r3, [r4, r2]
 8000b5c:	e7ab      	b.n	8000ab6 <_malloc_r+0x22>
 8000b5e:	42a3      	cmp	r3, r4
 8000b60:	6862      	ldr	r2, [r4, #4]
 8000b62:	d1dd      	bne.n	8000b20 <_malloc_r+0x8c>
 8000b64:	f8c8 2000 	str.w	r2, [r8]
 8000b68:	e7ec      	b.n	8000b44 <_malloc_r+0xb0>
 8000b6a:	4623      	mov	r3, r4
 8000b6c:	6864      	ldr	r4, [r4, #4]
 8000b6e:	e7ac      	b.n	8000aca <_malloc_r+0x36>
 8000b70:	4634      	mov	r4, r6
 8000b72:	6876      	ldr	r6, [r6, #4]
 8000b74:	e7b4      	b.n	8000ae0 <_malloc_r+0x4c>
 8000b76:	4613      	mov	r3, r2
 8000b78:	e7cc      	b.n	8000b14 <_malloc_r+0x80>
 8000b7a:	230c      	movs	r3, #12
 8000b7c:	603b      	str	r3, [r7, #0]
 8000b7e:	4638      	mov	r0, r7
 8000b80:	f000 f8b8 	bl	8000cf4 <__malloc_unlock>
 8000b84:	e797      	b.n	8000ab6 <_malloc_r+0x22>
 8000b86:	6025      	str	r5, [r4, #0]
 8000b88:	e7dc      	b.n	8000b44 <_malloc_r+0xb0>
 8000b8a:	605b      	str	r3, [r3, #4]
 8000b8c:	deff      	udf	#255	; 0xff
 8000b8e:	bf00      	nop
 8000b90:	200001d4 	.word	0x200001d4

08000b94 <__sflush_r>:
 8000b94:	898a      	ldrh	r2, [r1, #12]
 8000b96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b98:	4605      	mov	r5, r0
 8000b9a:	0710      	lsls	r0, r2, #28
 8000b9c:	460c      	mov	r4, r1
 8000b9e:	d457      	bmi.n	8000c50 <__sflush_r+0xbc>
 8000ba0:	684b      	ldr	r3, [r1, #4]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	dc04      	bgt.n	8000bb0 <__sflush_r+0x1c>
 8000ba6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	dc01      	bgt.n	8000bb0 <__sflush_r+0x1c>
 8000bac:	2000      	movs	r0, #0
 8000bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000bb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000bb2:	2e00      	cmp	r6, #0
 8000bb4:	d0fa      	beq.n	8000bac <__sflush_r+0x18>
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000bbc:	682f      	ldr	r7, [r5, #0]
 8000bbe:	6a21      	ldr	r1, [r4, #32]
 8000bc0:	602b      	str	r3, [r5, #0]
 8000bc2:	d032      	beq.n	8000c2a <__sflush_r+0x96>
 8000bc4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000bc6:	89a3      	ldrh	r3, [r4, #12]
 8000bc8:	075a      	lsls	r2, r3, #29
 8000bca:	d505      	bpl.n	8000bd8 <__sflush_r+0x44>
 8000bcc:	6863      	ldr	r3, [r4, #4]
 8000bce:	1ac0      	subs	r0, r0, r3
 8000bd0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000bd2:	b10b      	cbz	r3, 8000bd8 <__sflush_r+0x44>
 8000bd4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000bd6:	1ac0      	subs	r0, r0, r3
 8000bd8:	2300      	movs	r3, #0
 8000bda:	4602      	mov	r2, r0
 8000bdc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000bde:	6a21      	ldr	r1, [r4, #32]
 8000be0:	4628      	mov	r0, r5
 8000be2:	47b0      	blx	r6
 8000be4:	1c43      	adds	r3, r0, #1
 8000be6:	89a3      	ldrh	r3, [r4, #12]
 8000be8:	d106      	bne.n	8000bf8 <__sflush_r+0x64>
 8000bea:	6829      	ldr	r1, [r5, #0]
 8000bec:	291d      	cmp	r1, #29
 8000bee:	d82b      	bhi.n	8000c48 <__sflush_r+0xb4>
 8000bf0:	4a28      	ldr	r2, [pc, #160]	; (8000c94 <__sflush_r+0x100>)
 8000bf2:	410a      	asrs	r2, r1
 8000bf4:	07d6      	lsls	r6, r2, #31
 8000bf6:	d427      	bmi.n	8000c48 <__sflush_r+0xb4>
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	6062      	str	r2, [r4, #4]
 8000bfc:	04d9      	lsls	r1, r3, #19
 8000bfe:	6922      	ldr	r2, [r4, #16]
 8000c00:	6022      	str	r2, [r4, #0]
 8000c02:	d504      	bpl.n	8000c0e <__sflush_r+0x7a>
 8000c04:	1c42      	adds	r2, r0, #1
 8000c06:	d101      	bne.n	8000c0c <__sflush_r+0x78>
 8000c08:	682b      	ldr	r3, [r5, #0]
 8000c0a:	b903      	cbnz	r3, 8000c0e <__sflush_r+0x7a>
 8000c0c:	6560      	str	r0, [r4, #84]	; 0x54
 8000c0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000c10:	602f      	str	r7, [r5, #0]
 8000c12:	2900      	cmp	r1, #0
 8000c14:	d0ca      	beq.n	8000bac <__sflush_r+0x18>
 8000c16:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	d002      	beq.n	8000c24 <__sflush_r+0x90>
 8000c1e:	4628      	mov	r0, r5
 8000c20:	f000 fa20 	bl	8001064 <_free_r>
 8000c24:	2000      	movs	r0, #0
 8000c26:	6360      	str	r0, [r4, #52]	; 0x34
 8000c28:	e7c1      	b.n	8000bae <__sflush_r+0x1a>
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	4628      	mov	r0, r5
 8000c2e:	47b0      	blx	r6
 8000c30:	1c41      	adds	r1, r0, #1
 8000c32:	d1c8      	bne.n	8000bc6 <__sflush_r+0x32>
 8000c34:	682b      	ldr	r3, [r5, #0]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d0c5      	beq.n	8000bc6 <__sflush_r+0x32>
 8000c3a:	2b1d      	cmp	r3, #29
 8000c3c:	d001      	beq.n	8000c42 <__sflush_r+0xae>
 8000c3e:	2b16      	cmp	r3, #22
 8000c40:	d101      	bne.n	8000c46 <__sflush_r+0xb2>
 8000c42:	602f      	str	r7, [r5, #0]
 8000c44:	e7b2      	b.n	8000bac <__sflush_r+0x18>
 8000c46:	89a3      	ldrh	r3, [r4, #12]
 8000c48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c4c:	81a3      	strh	r3, [r4, #12]
 8000c4e:	e7ae      	b.n	8000bae <__sflush_r+0x1a>
 8000c50:	690f      	ldr	r7, [r1, #16]
 8000c52:	2f00      	cmp	r7, #0
 8000c54:	d0aa      	beq.n	8000bac <__sflush_r+0x18>
 8000c56:	0793      	lsls	r3, r2, #30
 8000c58:	680e      	ldr	r6, [r1, #0]
 8000c5a:	bf08      	it	eq
 8000c5c:	694b      	ldreq	r3, [r1, #20]
 8000c5e:	600f      	str	r7, [r1, #0]
 8000c60:	bf18      	it	ne
 8000c62:	2300      	movne	r3, #0
 8000c64:	1bf6      	subs	r6, r6, r7
 8000c66:	608b      	str	r3, [r1, #8]
 8000c68:	2e00      	cmp	r6, #0
 8000c6a:	dd9f      	ble.n	8000bac <__sflush_r+0x18>
 8000c6c:	6a21      	ldr	r1, [r4, #32]
 8000c6e:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8000c72:	4633      	mov	r3, r6
 8000c74:	463a      	mov	r2, r7
 8000c76:	4628      	mov	r0, r5
 8000c78:	47e0      	blx	ip
 8000c7a:	2800      	cmp	r0, #0
 8000c7c:	dc06      	bgt.n	8000c8c <__sflush_r+0xf8>
 8000c7e:	89a3      	ldrh	r3, [r4, #12]
 8000c80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c84:	81a3      	strh	r3, [r4, #12]
 8000c86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c8a:	e790      	b.n	8000bae <__sflush_r+0x1a>
 8000c8c:	4407      	add	r7, r0
 8000c8e:	1a36      	subs	r6, r6, r0
 8000c90:	e7ea      	b.n	8000c68 <__sflush_r+0xd4>
 8000c92:	bf00      	nop
 8000c94:	dfbffffe 	.word	0xdfbffffe

08000c98 <_fflush_r>:
 8000c98:	b538      	push	{r3, r4, r5, lr}
 8000c9a:	690b      	ldr	r3, [r1, #16]
 8000c9c:	4605      	mov	r5, r0
 8000c9e:	460c      	mov	r4, r1
 8000ca0:	b913      	cbnz	r3, 8000ca8 <_fflush_r+0x10>
 8000ca2:	2500      	movs	r5, #0
 8000ca4:	4628      	mov	r0, r5
 8000ca6:	bd38      	pop	{r3, r4, r5, pc}
 8000ca8:	b118      	cbz	r0, 8000cb2 <_fflush_r+0x1a>
 8000caa:	6a03      	ldr	r3, [r0, #32]
 8000cac:	b90b      	cbnz	r3, 8000cb2 <_fflush_r+0x1a>
 8000cae:	f7ff fe09 	bl	80008c4 <__sinit>
 8000cb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d0f3      	beq.n	8000ca2 <_fflush_r+0xa>
 8000cba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000cbc:	07d0      	lsls	r0, r2, #31
 8000cbe:	d404      	bmi.n	8000cca <_fflush_r+0x32>
 8000cc0:	0599      	lsls	r1, r3, #22
 8000cc2:	d402      	bmi.n	8000cca <_fflush_r+0x32>
 8000cc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000cc6:	f7ff fec2 	bl	8000a4e <__retarget_lock_acquire_recursive>
 8000cca:	4628      	mov	r0, r5
 8000ccc:	4621      	mov	r1, r4
 8000cce:	f7ff ff61 	bl	8000b94 <__sflush_r>
 8000cd2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000cd4:	07da      	lsls	r2, r3, #31
 8000cd6:	4605      	mov	r5, r0
 8000cd8:	d4e4      	bmi.n	8000ca4 <_fflush_r+0xc>
 8000cda:	89a3      	ldrh	r3, [r4, #12]
 8000cdc:	059b      	lsls	r3, r3, #22
 8000cde:	d4e1      	bmi.n	8000ca4 <_fflush_r+0xc>
 8000ce0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000ce2:	f7ff feb5 	bl	8000a50 <__retarget_lock_release_recursive>
 8000ce6:	e7dd      	b.n	8000ca4 <_fflush_r+0xc>

08000ce8 <__malloc_lock>:
 8000ce8:	4801      	ldr	r0, [pc, #4]	; (8000cf0 <__malloc_lock+0x8>)
 8000cea:	f7ff beb0 	b.w	8000a4e <__retarget_lock_acquire_recursive>
 8000cee:	bf00      	nop
 8000cf0:	200001d0 	.word	0x200001d0

08000cf4 <__malloc_unlock>:
 8000cf4:	4801      	ldr	r0, [pc, #4]	; (8000cfc <__malloc_unlock+0x8>)
 8000cf6:	f7ff beab 	b.w	8000a50 <__retarget_lock_release_recursive>
 8000cfa:	bf00      	nop
 8000cfc:	200001d0 	.word	0x200001d0

08000d00 <__sread>:
 8000d00:	b510      	push	{r4, lr}
 8000d02:	460c      	mov	r4, r1
 8000d04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d08:	f000 f978 	bl	8000ffc <_read_r>
 8000d0c:	2800      	cmp	r0, #0
 8000d0e:	bfab      	itete	ge
 8000d10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000d12:	89a3      	ldrhlt	r3, [r4, #12]
 8000d14:	181b      	addge	r3, r3, r0
 8000d16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000d1a:	bfac      	ite	ge
 8000d1c:	6563      	strge	r3, [r4, #84]	; 0x54
 8000d1e:	81a3      	strhlt	r3, [r4, #12]
 8000d20:	bd10      	pop	{r4, pc}

08000d22 <__swrite>:
 8000d22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d26:	461f      	mov	r7, r3
 8000d28:	898b      	ldrh	r3, [r1, #12]
 8000d2a:	05db      	lsls	r3, r3, #23
 8000d2c:	4605      	mov	r5, r0
 8000d2e:	460c      	mov	r4, r1
 8000d30:	4616      	mov	r6, r2
 8000d32:	d505      	bpl.n	8000d40 <__swrite+0x1e>
 8000d34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d38:	2302      	movs	r3, #2
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	f000 f94c 	bl	8000fd8 <_lseek_r>
 8000d40:	89a3      	ldrh	r3, [r4, #12]
 8000d42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000d46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000d4a:	81a3      	strh	r3, [r4, #12]
 8000d4c:	4632      	mov	r2, r6
 8000d4e:	463b      	mov	r3, r7
 8000d50:	4628      	mov	r0, r5
 8000d52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000d56:	f000 b973 	b.w	8001040 <_write_r>

08000d5a <__sseek>:
 8000d5a:	b510      	push	{r4, lr}
 8000d5c:	460c      	mov	r4, r1
 8000d5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d62:	f000 f939 	bl	8000fd8 <_lseek_r>
 8000d66:	1c43      	adds	r3, r0, #1
 8000d68:	89a3      	ldrh	r3, [r4, #12]
 8000d6a:	bf15      	itete	ne
 8000d6c:	6560      	strne	r0, [r4, #84]	; 0x54
 8000d6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000d72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000d76:	81a3      	strheq	r3, [r4, #12]
 8000d78:	bf18      	it	ne
 8000d7a:	81a3      	strhne	r3, [r4, #12]
 8000d7c:	bd10      	pop	{r4, pc}

08000d7e <__sclose>:
 8000d7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d82:	f000 b8f7 	b.w	8000f74 <_close_r>

08000d86 <__swbuf_r>:
 8000d86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d88:	460e      	mov	r6, r1
 8000d8a:	4614      	mov	r4, r2
 8000d8c:	4605      	mov	r5, r0
 8000d8e:	b118      	cbz	r0, 8000d98 <__swbuf_r+0x12>
 8000d90:	6a03      	ldr	r3, [r0, #32]
 8000d92:	b90b      	cbnz	r3, 8000d98 <__swbuf_r+0x12>
 8000d94:	f7ff fd96 	bl	80008c4 <__sinit>
 8000d98:	69a3      	ldr	r3, [r4, #24]
 8000d9a:	60a3      	str	r3, [r4, #8]
 8000d9c:	89a3      	ldrh	r3, [r4, #12]
 8000d9e:	071a      	lsls	r2, r3, #28
 8000da0:	d525      	bpl.n	8000dee <__swbuf_r+0x68>
 8000da2:	6923      	ldr	r3, [r4, #16]
 8000da4:	b31b      	cbz	r3, 8000dee <__swbuf_r+0x68>
 8000da6:	6823      	ldr	r3, [r4, #0]
 8000da8:	6922      	ldr	r2, [r4, #16]
 8000daa:	1a98      	subs	r0, r3, r2
 8000dac:	6963      	ldr	r3, [r4, #20]
 8000dae:	b2f6      	uxtb	r6, r6
 8000db0:	4283      	cmp	r3, r0
 8000db2:	4637      	mov	r7, r6
 8000db4:	dc04      	bgt.n	8000dc0 <__swbuf_r+0x3a>
 8000db6:	4621      	mov	r1, r4
 8000db8:	4628      	mov	r0, r5
 8000dba:	f7ff ff6d 	bl	8000c98 <_fflush_r>
 8000dbe:	b9e0      	cbnz	r0, 8000dfa <__swbuf_r+0x74>
 8000dc0:	68a3      	ldr	r3, [r4, #8]
 8000dc2:	3b01      	subs	r3, #1
 8000dc4:	60a3      	str	r3, [r4, #8]
 8000dc6:	6823      	ldr	r3, [r4, #0]
 8000dc8:	1c5a      	adds	r2, r3, #1
 8000dca:	6022      	str	r2, [r4, #0]
 8000dcc:	701e      	strb	r6, [r3, #0]
 8000dce:	6962      	ldr	r2, [r4, #20]
 8000dd0:	1c43      	adds	r3, r0, #1
 8000dd2:	429a      	cmp	r2, r3
 8000dd4:	d004      	beq.n	8000de0 <__swbuf_r+0x5a>
 8000dd6:	89a3      	ldrh	r3, [r4, #12]
 8000dd8:	07db      	lsls	r3, r3, #31
 8000dda:	d506      	bpl.n	8000dea <__swbuf_r+0x64>
 8000ddc:	2e0a      	cmp	r6, #10
 8000dde:	d104      	bne.n	8000dea <__swbuf_r+0x64>
 8000de0:	4621      	mov	r1, r4
 8000de2:	4628      	mov	r0, r5
 8000de4:	f7ff ff58 	bl	8000c98 <_fflush_r>
 8000de8:	b938      	cbnz	r0, 8000dfa <__swbuf_r+0x74>
 8000dea:	4638      	mov	r0, r7
 8000dec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000dee:	4621      	mov	r1, r4
 8000df0:	4628      	mov	r0, r5
 8000df2:	f000 f805 	bl	8000e00 <__swsetup_r>
 8000df6:	2800      	cmp	r0, #0
 8000df8:	d0d5      	beq.n	8000da6 <__swbuf_r+0x20>
 8000dfa:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8000dfe:	e7f4      	b.n	8000dea <__swbuf_r+0x64>

08000e00 <__swsetup_r>:
 8000e00:	b538      	push	{r3, r4, r5, lr}
 8000e02:	4b2a      	ldr	r3, [pc, #168]	; (8000eac <__swsetup_r+0xac>)
 8000e04:	4605      	mov	r5, r0
 8000e06:	6818      	ldr	r0, [r3, #0]
 8000e08:	460c      	mov	r4, r1
 8000e0a:	b118      	cbz	r0, 8000e14 <__swsetup_r+0x14>
 8000e0c:	6a03      	ldr	r3, [r0, #32]
 8000e0e:	b90b      	cbnz	r3, 8000e14 <__swsetup_r+0x14>
 8000e10:	f7ff fd58 	bl	80008c4 <__sinit>
 8000e14:	89a3      	ldrh	r3, [r4, #12]
 8000e16:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000e1a:	0718      	lsls	r0, r3, #28
 8000e1c:	d422      	bmi.n	8000e64 <__swsetup_r+0x64>
 8000e1e:	06d9      	lsls	r1, r3, #27
 8000e20:	d407      	bmi.n	8000e32 <__swsetup_r+0x32>
 8000e22:	2309      	movs	r3, #9
 8000e24:	602b      	str	r3, [r5, #0]
 8000e26:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000e2a:	81a3      	strh	r3, [r4, #12]
 8000e2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e30:	e034      	b.n	8000e9c <__swsetup_r+0x9c>
 8000e32:	0758      	lsls	r0, r3, #29
 8000e34:	d512      	bpl.n	8000e5c <__swsetup_r+0x5c>
 8000e36:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000e38:	b141      	cbz	r1, 8000e4c <__swsetup_r+0x4c>
 8000e3a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000e3e:	4299      	cmp	r1, r3
 8000e40:	d002      	beq.n	8000e48 <__swsetup_r+0x48>
 8000e42:	4628      	mov	r0, r5
 8000e44:	f000 f90e 	bl	8001064 <_free_r>
 8000e48:	2300      	movs	r3, #0
 8000e4a:	6363      	str	r3, [r4, #52]	; 0x34
 8000e4c:	89a3      	ldrh	r3, [r4, #12]
 8000e4e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000e52:	81a3      	strh	r3, [r4, #12]
 8000e54:	2300      	movs	r3, #0
 8000e56:	6063      	str	r3, [r4, #4]
 8000e58:	6923      	ldr	r3, [r4, #16]
 8000e5a:	6023      	str	r3, [r4, #0]
 8000e5c:	89a3      	ldrh	r3, [r4, #12]
 8000e5e:	f043 0308 	orr.w	r3, r3, #8
 8000e62:	81a3      	strh	r3, [r4, #12]
 8000e64:	6923      	ldr	r3, [r4, #16]
 8000e66:	b94b      	cbnz	r3, 8000e7c <__swsetup_r+0x7c>
 8000e68:	89a3      	ldrh	r3, [r4, #12]
 8000e6a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000e6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e72:	d003      	beq.n	8000e7c <__swsetup_r+0x7c>
 8000e74:	4621      	mov	r1, r4
 8000e76:	4628      	mov	r0, r5
 8000e78:	f000 f840 	bl	8000efc <__smakebuf_r>
 8000e7c:	89a0      	ldrh	r0, [r4, #12]
 8000e7e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000e82:	f010 0301 	ands.w	r3, r0, #1
 8000e86:	d00a      	beq.n	8000e9e <__swsetup_r+0x9e>
 8000e88:	2300      	movs	r3, #0
 8000e8a:	60a3      	str	r3, [r4, #8]
 8000e8c:	6963      	ldr	r3, [r4, #20]
 8000e8e:	425b      	negs	r3, r3
 8000e90:	61a3      	str	r3, [r4, #24]
 8000e92:	6923      	ldr	r3, [r4, #16]
 8000e94:	b943      	cbnz	r3, 8000ea8 <__swsetup_r+0xa8>
 8000e96:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000e9a:	d1c4      	bne.n	8000e26 <__swsetup_r+0x26>
 8000e9c:	bd38      	pop	{r3, r4, r5, pc}
 8000e9e:	0781      	lsls	r1, r0, #30
 8000ea0:	bf58      	it	pl
 8000ea2:	6963      	ldrpl	r3, [r4, #20]
 8000ea4:	60a3      	str	r3, [r4, #8]
 8000ea6:	e7f4      	b.n	8000e92 <__swsetup_r+0x92>
 8000ea8:	2000      	movs	r0, #0
 8000eaa:	e7f7      	b.n	8000e9c <__swsetup_r+0x9c>
 8000eac:	20000070 	.word	0x20000070

08000eb0 <__swhatbuf_r>:
 8000eb0:	b570      	push	{r4, r5, r6, lr}
 8000eb2:	460c      	mov	r4, r1
 8000eb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000eb8:	2900      	cmp	r1, #0
 8000eba:	b096      	sub	sp, #88	; 0x58
 8000ebc:	4615      	mov	r5, r2
 8000ebe:	461e      	mov	r6, r3
 8000ec0:	da0d      	bge.n	8000ede <__swhatbuf_r+0x2e>
 8000ec2:	89a3      	ldrh	r3, [r4, #12]
 8000ec4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000ec8:	f04f 0100 	mov.w	r1, #0
 8000ecc:	bf0c      	ite	eq
 8000ece:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8000ed2:	2340      	movne	r3, #64	; 0x40
 8000ed4:	2000      	movs	r0, #0
 8000ed6:	6031      	str	r1, [r6, #0]
 8000ed8:	602b      	str	r3, [r5, #0]
 8000eda:	b016      	add	sp, #88	; 0x58
 8000edc:	bd70      	pop	{r4, r5, r6, pc}
 8000ede:	466a      	mov	r2, sp
 8000ee0:	f000 f858 	bl	8000f94 <_fstat_r>
 8000ee4:	2800      	cmp	r0, #0
 8000ee6:	dbec      	blt.n	8000ec2 <__swhatbuf_r+0x12>
 8000ee8:	9901      	ldr	r1, [sp, #4]
 8000eea:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8000eee:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8000ef2:	4259      	negs	r1, r3
 8000ef4:	4159      	adcs	r1, r3
 8000ef6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000efa:	e7eb      	b.n	8000ed4 <__swhatbuf_r+0x24>

08000efc <__smakebuf_r>:
 8000efc:	898b      	ldrh	r3, [r1, #12]
 8000efe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000f00:	079d      	lsls	r5, r3, #30
 8000f02:	4606      	mov	r6, r0
 8000f04:	460c      	mov	r4, r1
 8000f06:	d507      	bpl.n	8000f18 <__smakebuf_r+0x1c>
 8000f08:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000f0c:	6023      	str	r3, [r4, #0]
 8000f0e:	6123      	str	r3, [r4, #16]
 8000f10:	2301      	movs	r3, #1
 8000f12:	6163      	str	r3, [r4, #20]
 8000f14:	b002      	add	sp, #8
 8000f16:	bd70      	pop	{r4, r5, r6, pc}
 8000f18:	ab01      	add	r3, sp, #4
 8000f1a:	466a      	mov	r2, sp
 8000f1c:	f7ff ffc8 	bl	8000eb0 <__swhatbuf_r>
 8000f20:	9900      	ldr	r1, [sp, #0]
 8000f22:	4605      	mov	r5, r0
 8000f24:	4630      	mov	r0, r6
 8000f26:	f7ff fdb5 	bl	8000a94 <_malloc_r>
 8000f2a:	b948      	cbnz	r0, 8000f40 <__smakebuf_r+0x44>
 8000f2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000f30:	059a      	lsls	r2, r3, #22
 8000f32:	d4ef      	bmi.n	8000f14 <__smakebuf_r+0x18>
 8000f34:	f023 0303 	bic.w	r3, r3, #3
 8000f38:	f043 0302 	orr.w	r3, r3, #2
 8000f3c:	81a3      	strh	r3, [r4, #12]
 8000f3e:	e7e3      	b.n	8000f08 <__smakebuf_r+0xc>
 8000f40:	89a3      	ldrh	r3, [r4, #12]
 8000f42:	6020      	str	r0, [r4, #0]
 8000f44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f48:	81a3      	strh	r3, [r4, #12]
 8000f4a:	9b00      	ldr	r3, [sp, #0]
 8000f4c:	6163      	str	r3, [r4, #20]
 8000f4e:	9b01      	ldr	r3, [sp, #4]
 8000f50:	6120      	str	r0, [r4, #16]
 8000f52:	b15b      	cbz	r3, 8000f6c <__smakebuf_r+0x70>
 8000f54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000f58:	4630      	mov	r0, r6
 8000f5a:	f000 f82d 	bl	8000fb8 <_isatty_r>
 8000f5e:	b128      	cbz	r0, 8000f6c <__smakebuf_r+0x70>
 8000f60:	89a3      	ldrh	r3, [r4, #12]
 8000f62:	f023 0303 	bic.w	r3, r3, #3
 8000f66:	f043 0301 	orr.w	r3, r3, #1
 8000f6a:	81a3      	strh	r3, [r4, #12]
 8000f6c:	89a3      	ldrh	r3, [r4, #12]
 8000f6e:	431d      	orrs	r5, r3
 8000f70:	81a5      	strh	r5, [r4, #12]
 8000f72:	e7cf      	b.n	8000f14 <__smakebuf_r+0x18>

08000f74 <_close_r>:
 8000f74:	b538      	push	{r3, r4, r5, lr}
 8000f76:	4d06      	ldr	r5, [pc, #24]	; (8000f90 <_close_r+0x1c>)
 8000f78:	2300      	movs	r3, #0
 8000f7a:	4604      	mov	r4, r0
 8000f7c:	4608      	mov	r0, r1
 8000f7e:	602b      	str	r3, [r5, #0]
 8000f80:	f7ff fb83 	bl	800068a <_close>
 8000f84:	1c43      	adds	r3, r0, #1
 8000f86:	d102      	bne.n	8000f8e <_close_r+0x1a>
 8000f88:	682b      	ldr	r3, [r5, #0]
 8000f8a:	b103      	cbz	r3, 8000f8e <_close_r+0x1a>
 8000f8c:	6023      	str	r3, [r4, #0]
 8000f8e:	bd38      	pop	{r3, r4, r5, pc}
 8000f90:	200001dc 	.word	0x200001dc

08000f94 <_fstat_r>:
 8000f94:	b538      	push	{r3, r4, r5, lr}
 8000f96:	4d07      	ldr	r5, [pc, #28]	; (8000fb4 <_fstat_r+0x20>)
 8000f98:	2300      	movs	r3, #0
 8000f9a:	4604      	mov	r4, r0
 8000f9c:	4608      	mov	r0, r1
 8000f9e:	4611      	mov	r1, r2
 8000fa0:	602b      	str	r3, [r5, #0]
 8000fa2:	f7ff fb7d 	bl	80006a0 <_fstat>
 8000fa6:	1c43      	adds	r3, r0, #1
 8000fa8:	d102      	bne.n	8000fb0 <_fstat_r+0x1c>
 8000faa:	682b      	ldr	r3, [r5, #0]
 8000fac:	b103      	cbz	r3, 8000fb0 <_fstat_r+0x1c>
 8000fae:	6023      	str	r3, [r4, #0]
 8000fb0:	bd38      	pop	{r3, r4, r5, pc}
 8000fb2:	bf00      	nop
 8000fb4:	200001dc 	.word	0x200001dc

08000fb8 <_isatty_r>:
 8000fb8:	b538      	push	{r3, r4, r5, lr}
 8000fba:	4d06      	ldr	r5, [pc, #24]	; (8000fd4 <_isatty_r+0x1c>)
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	4604      	mov	r4, r0
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	602b      	str	r3, [r5, #0]
 8000fc4:	f7ff fb7b 	bl	80006be <_isatty>
 8000fc8:	1c43      	adds	r3, r0, #1
 8000fca:	d102      	bne.n	8000fd2 <_isatty_r+0x1a>
 8000fcc:	682b      	ldr	r3, [r5, #0]
 8000fce:	b103      	cbz	r3, 8000fd2 <_isatty_r+0x1a>
 8000fd0:	6023      	str	r3, [r4, #0]
 8000fd2:	bd38      	pop	{r3, r4, r5, pc}
 8000fd4:	200001dc 	.word	0x200001dc

08000fd8 <_lseek_r>:
 8000fd8:	b538      	push	{r3, r4, r5, lr}
 8000fda:	4d07      	ldr	r5, [pc, #28]	; (8000ff8 <_lseek_r+0x20>)
 8000fdc:	4604      	mov	r4, r0
 8000fde:	4608      	mov	r0, r1
 8000fe0:	4611      	mov	r1, r2
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	602a      	str	r2, [r5, #0]
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	f7ff fb73 	bl	80006d2 <_lseek>
 8000fec:	1c43      	adds	r3, r0, #1
 8000fee:	d102      	bne.n	8000ff6 <_lseek_r+0x1e>
 8000ff0:	682b      	ldr	r3, [r5, #0]
 8000ff2:	b103      	cbz	r3, 8000ff6 <_lseek_r+0x1e>
 8000ff4:	6023      	str	r3, [r4, #0]
 8000ff6:	bd38      	pop	{r3, r4, r5, pc}
 8000ff8:	200001dc 	.word	0x200001dc

08000ffc <_read_r>:
 8000ffc:	b538      	push	{r3, r4, r5, lr}
 8000ffe:	4d07      	ldr	r5, [pc, #28]	; (800101c <_read_r+0x20>)
 8001000:	4604      	mov	r4, r0
 8001002:	4608      	mov	r0, r1
 8001004:	4611      	mov	r1, r2
 8001006:	2200      	movs	r2, #0
 8001008:	602a      	str	r2, [r5, #0]
 800100a:	461a      	mov	r2, r3
 800100c:	f7ff fb04 	bl	8000618 <_read>
 8001010:	1c43      	adds	r3, r0, #1
 8001012:	d102      	bne.n	800101a <_read_r+0x1e>
 8001014:	682b      	ldr	r3, [r5, #0]
 8001016:	b103      	cbz	r3, 800101a <_read_r+0x1e>
 8001018:	6023      	str	r3, [r4, #0]
 800101a:	bd38      	pop	{r3, r4, r5, pc}
 800101c:	200001dc 	.word	0x200001dc

08001020 <_sbrk_r>:
 8001020:	b538      	push	{r3, r4, r5, lr}
 8001022:	4d06      	ldr	r5, [pc, #24]	; (800103c <_sbrk_r+0x1c>)
 8001024:	2300      	movs	r3, #0
 8001026:	4604      	mov	r4, r0
 8001028:	4608      	mov	r0, r1
 800102a:	602b      	str	r3, [r5, #0]
 800102c:	f7ff fb5e 	bl	80006ec <_sbrk>
 8001030:	1c43      	adds	r3, r0, #1
 8001032:	d102      	bne.n	800103a <_sbrk_r+0x1a>
 8001034:	682b      	ldr	r3, [r5, #0]
 8001036:	b103      	cbz	r3, 800103a <_sbrk_r+0x1a>
 8001038:	6023      	str	r3, [r4, #0]
 800103a:	bd38      	pop	{r3, r4, r5, pc}
 800103c:	200001dc 	.word	0x200001dc

08001040 <_write_r>:
 8001040:	b538      	push	{r3, r4, r5, lr}
 8001042:	4d07      	ldr	r5, [pc, #28]	; (8001060 <_write_r+0x20>)
 8001044:	4604      	mov	r4, r0
 8001046:	4608      	mov	r0, r1
 8001048:	4611      	mov	r1, r2
 800104a:	2200      	movs	r2, #0
 800104c:	602a      	str	r2, [r5, #0]
 800104e:	461a      	mov	r2, r3
 8001050:	f7ff faff 	bl	8000652 <_write>
 8001054:	1c43      	adds	r3, r0, #1
 8001056:	d102      	bne.n	800105e <_write_r+0x1e>
 8001058:	682b      	ldr	r3, [r5, #0]
 800105a:	b103      	cbz	r3, 800105e <_write_r+0x1e>
 800105c:	6023      	str	r3, [r4, #0]
 800105e:	bd38      	pop	{r3, r4, r5, pc}
 8001060:	200001dc 	.word	0x200001dc

08001064 <_free_r>:
 8001064:	b538      	push	{r3, r4, r5, lr}
 8001066:	4605      	mov	r5, r0
 8001068:	2900      	cmp	r1, #0
 800106a:	d041      	beq.n	80010f0 <_free_r+0x8c>
 800106c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001070:	1f0c      	subs	r4, r1, #4
 8001072:	2b00      	cmp	r3, #0
 8001074:	bfb8      	it	lt
 8001076:	18e4      	addlt	r4, r4, r3
 8001078:	f7ff fe36 	bl	8000ce8 <__malloc_lock>
 800107c:	4a1d      	ldr	r2, [pc, #116]	; (80010f4 <_free_r+0x90>)
 800107e:	6813      	ldr	r3, [r2, #0]
 8001080:	b933      	cbnz	r3, 8001090 <_free_r+0x2c>
 8001082:	6063      	str	r3, [r4, #4]
 8001084:	6014      	str	r4, [r2, #0]
 8001086:	4628      	mov	r0, r5
 8001088:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800108c:	f7ff be32 	b.w	8000cf4 <__malloc_unlock>
 8001090:	42a3      	cmp	r3, r4
 8001092:	d908      	bls.n	80010a6 <_free_r+0x42>
 8001094:	6820      	ldr	r0, [r4, #0]
 8001096:	1821      	adds	r1, r4, r0
 8001098:	428b      	cmp	r3, r1
 800109a:	bf01      	itttt	eq
 800109c:	6819      	ldreq	r1, [r3, #0]
 800109e:	685b      	ldreq	r3, [r3, #4]
 80010a0:	1809      	addeq	r1, r1, r0
 80010a2:	6021      	streq	r1, [r4, #0]
 80010a4:	e7ed      	b.n	8001082 <_free_r+0x1e>
 80010a6:	461a      	mov	r2, r3
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	b10b      	cbz	r3, 80010b0 <_free_r+0x4c>
 80010ac:	42a3      	cmp	r3, r4
 80010ae:	d9fa      	bls.n	80010a6 <_free_r+0x42>
 80010b0:	6811      	ldr	r1, [r2, #0]
 80010b2:	1850      	adds	r0, r2, r1
 80010b4:	42a0      	cmp	r0, r4
 80010b6:	d10b      	bne.n	80010d0 <_free_r+0x6c>
 80010b8:	6820      	ldr	r0, [r4, #0]
 80010ba:	4401      	add	r1, r0
 80010bc:	1850      	adds	r0, r2, r1
 80010be:	4283      	cmp	r3, r0
 80010c0:	6011      	str	r1, [r2, #0]
 80010c2:	d1e0      	bne.n	8001086 <_free_r+0x22>
 80010c4:	6818      	ldr	r0, [r3, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	6053      	str	r3, [r2, #4]
 80010ca:	4408      	add	r0, r1
 80010cc:	6010      	str	r0, [r2, #0]
 80010ce:	e7da      	b.n	8001086 <_free_r+0x22>
 80010d0:	d902      	bls.n	80010d8 <_free_r+0x74>
 80010d2:	230c      	movs	r3, #12
 80010d4:	602b      	str	r3, [r5, #0]
 80010d6:	e7d6      	b.n	8001086 <_free_r+0x22>
 80010d8:	6820      	ldr	r0, [r4, #0]
 80010da:	1821      	adds	r1, r4, r0
 80010dc:	428b      	cmp	r3, r1
 80010de:	bf04      	itt	eq
 80010e0:	6819      	ldreq	r1, [r3, #0]
 80010e2:	685b      	ldreq	r3, [r3, #4]
 80010e4:	6063      	str	r3, [r4, #4]
 80010e6:	bf04      	itt	eq
 80010e8:	1809      	addeq	r1, r1, r0
 80010ea:	6021      	streq	r1, [r4, #0]
 80010ec:	6054      	str	r4, [r2, #4]
 80010ee:	e7ca      	b.n	8001086 <_free_r+0x22>
 80010f0:	bd38      	pop	{r3, r4, r5, pc}
 80010f2:	bf00      	nop
 80010f4:	200001d4 	.word	0x200001d4

080010f8 <_init>:
 80010f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010fa:	bf00      	nop
 80010fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010fe:	bc08      	pop	{r3}
 8001100:	469e      	mov	lr, r3
 8001102:	4770      	bx	lr

08001104 <_fini>:
 8001104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001106:	bf00      	nop
 8001108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800110a:	bc08      	pop	{r3}
 800110c:	469e      	mov	lr, r3
 800110e:	4770      	bx	lr
